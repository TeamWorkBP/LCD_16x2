

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 23 18:15:20 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4550 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	idataCOMRAM
    61  000C12                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _btnText
    65  000C12  42                 	db	66
    66  000C13  74                 	db	116
    67  000C14  6E                 	db	110
    68  000C15  20                 	db	32
    69  000C16  3F                 	db	63
    70  000C17  00                 	db	0
    71  000C18  00                 	db	0
    72                           
    73                           	psect	nvCOMRAM
    74  00002C                     __pnvCOMRAM:
    75                           	opt stack 0
    76  00002C                     _LCD_busy_cnt:
    77                           	opt stack 0
    78  00002C                     	ds	2
    79  0000                     _PORTBbits	set	3969
    80  0000                     _TRISBbits	set	3987
    81  0000                     _PORTC	set	3970
    82  0000                     _TRISC	set	3988
    83  0000                     _ADCON1	set	4033
    84  0000                     _PORTDbits	set	3971
    85  0000                     _LATDbits	set	3980
    86  0000                     _TRISD	set	3989
    87  0000                     _TRISEbits	set	3990
    88  0000                     _LATEbits	set	3981
    89                           
    90                           	psect	smallconst
    91  000800                     __psmallconst:
    92                           	opt stack 0
    93  000800  00                 	db	0
    94  000801                     STR_1:
    95  000801  32                 	db	50	;'2'
    96  000802  33                 	db	51	;'3'
    97  000803  2E                 	db	46
    98  000804  30                 	db	48	;'0'
    99  000805  34                 	db	52	;'4'
   100  000806  2E                 	db	46
   101  000807  31                 	db	49	;'1'
   102  000808  38                 	db	56	;'8'
   103  000809  00                 	db	0
   104                           
   105                           ; #config settings
   106  00080A  00                 	db	0	; dummy byte at the end
   107  0000                     
   108                           	psect	cinit
   109  000B76                     __pcinit:
   110                           	opt stack 0
   111  000B76                     start_initialization:
   112                           	opt stack 0
   113  000B76                     __initialization:
   114                           	opt stack 0
   115                           
   116                           ; Initialize objects allocated to COMRAM (7 bytes)
   117                           ; load TBLPTR registers with __pidataCOMRAM
   118  000B76  0E12               	movlw	low __pidataCOMRAM
   119  000B78  6EF6               	movwf	tblptrl,c
   120  000B7A  0E0C               	movlw	high __pidataCOMRAM
   121  000B7C  6EF7               	movwf	tblptrh,c
   122  000B7E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   123  000B80  6EF8               	movwf	tblptru,c
   124  000B82  EE00  F021         	lfsr	0,__pdataCOMRAM
   125  000B86  EE10 F007          	lfsr	1,7
   126  000B8A                     copy_data0:
   127  000B8A  0009               	tblrd		*+
   128  000B8C  CFF5 FFEE          	movff	tablat,postinc0
   129  000B90  50E5               	movf	postdec1,w,c
   130  000B92  50E1               	movf	fsr1l,w,c
   131  000B94  E1FA               	bnz	copy_data0
   132                           
   133                           ; Clear objects allocated to COMRAM (4 bytes)
   134  000B96  6A2B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   135  000B98  6A2A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   136  000B9A  6A29               	clrf	(__pbssCOMRAM+1)& (0+255),c
   137  000B9C  6A28               	clrf	__pbssCOMRAM& (0+255),c
   138  000B9E                     end_of_initialization:
   139                           	opt stack 0
   140  000B9E                     __end_of__initialization:
   141                           	opt stack 0
   142  000B9E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   143  000BA0  6EF8               	movwf	tblptru,c
   144  000BA2  0E08               	movlw	high __Lsmallconst
   145  000BA4  6EF7               	movwf	tblptrh,c
   146  000BA6  0100               	movlb	0
   147  000BA8  EF68  F004         	goto	_main	;jump to C main() function
   148                           tblptru	equ	0xFF8
   149                           tblptrh	equ	0xFF7
   150                           tblptrl	equ	0xFF6
   151                           tablat	equ	0xFF5
   152                           postinc0	equ	0xFEE
   153                           postdec1	equ	0xFE5
   154                           fsr1l	equ	0xFE1
   155                           
   156                           	psect	bssCOMRAM
   157  000028                     __pbssCOMRAM:
   158                           	opt stack 0
   159  000028                     _cntButton:
   160                           	opt stack 0
   161  000028                     	ds	2
   162  00002A                     _displayTODO:
   163                           	opt stack 0
   164  00002A                     	ds	1
   165  00002B                     _LCD_data:
   166                           	opt stack 0
   167  00002B                     	ds	1
   168                           tblptru	equ	0xFF8
   169                           tblptrh	equ	0xFF7
   170                           tblptrl	equ	0xFF6
   171                           tablat	equ	0xFF5
   172                           postinc0	equ	0xFEE
   173                           postdec1	equ	0xFE5
   174                           fsr1l	equ	0xFE1
   175                           
   176                           	psect	dataCOMRAM
   177  000021                     __pdataCOMRAM:
   178                           	opt stack 0
   179  000021                     _btnText:
   180                           	opt stack 0
   181  000021                     	ds	7
   182                           tblptru	equ	0xFF8
   183                           tblptrh	equ	0xFF7
   184                           tblptrl	equ	0xFF6
   185                           tablat	equ	0xFF5
   186                           postinc0	equ	0xFEE
   187                           postdec1	equ	0xFE5
   188                           fsr1l	equ	0xFE1
   189                           
   190                           	psect	cstackCOMRAM
   191  000001                     __pcstackCOMRAM:
   192                           	opt stack 0
   193  000001                     ?___lwdiv:
   194                           	opt stack 0
   195  000001                     ?___lwmod:
   196                           	opt stack 0
   197  000001                     LCD_Write_Nibble@value:
   198                           	opt stack 0
   199  000001                     LCD_Write@value:
   200                           	opt stack 0
   201  000001                     ___lwdiv@dividend:
   202                           	opt stack 0
   203  000001                     ___lwmod@dividend:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x0
   207  000001                     	ds	1
   208  000002                     ??_LCD_Init:
   209  000002                     LCD_TextOut@text:
   210                           	opt stack 0
   211  000002                     LCD_ConstTextOut@text:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x1
   215  000002                     	ds	1
   216  000003                     ___lwdiv@divisor:
   217                           	opt stack 0
   218  000003                     ___lwmod@divisor:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x2
   222  000003                     	ds	1
   223  000004                     
   224                           ; 1 bytes @ 0x3
   225  000004                     	ds	1
   226  000005                     ___lwmod@counter:
   227                           	opt stack 0
   228  000005                     ___lwdiv@quotient:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x4
   232  000005                     	ds	2
   233  000007                     ___lwdiv@counter:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0x6
   237  000007                     	ds	1
   238  000008                     printNumber@n:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x7
   242  000008                     	ds	2
   243  00000A                     printNumber@buf:
   244                           	opt stack 0
   245                           
   246                           ; 20 bytes @ 0x9
   247  00000A                     	ds	20
   248  00001E                     printNumber@c:
   249                           	opt stack 0
   250                           
   251                           ; 1 bytes @ 0x1D
   252  00001E                     	ds	1
   253  00001F                     printNumber@str:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x1E
   257  00001F                     	ds	2
   258  000021                     tblptru	equ	0xFF8
   259                           tblptrh	equ	0xFF7
   260                           tblptrl	equ	0xFF6
   261                           tablat	equ	0xFF5
   262                           postinc0	equ	0xFEE
   263                           postdec1	equ	0xFE5
   264                           fsr1l	equ	0xFE1
   265                           
   266                           ; 1 bytes @ 0x20
   267 ;;
   268 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   269 ;;
   270 ;; *************** function _main *****************
   271 ;; Defined at:
   272 ;;		line 60 in file "main.c"
   273 ;; Parameters:    Size  Location     Type
   274 ;;		None
   275 ;; Auto vars:     Size  Location     Type
   276 ;;		None
   277 ;; Return value:  Size  Location     Type
   278 ;;                  1    wreg      void 
   279 ;; Registers used:
   280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   281 ;; Tracked objects:
   282 ;;		On entry : 0/0
   283 ;;		On exit  : 0/0
   284 ;;		Unchanged: 0/0
   285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   286 ;;      Params:         0       0       0       0       0       0       0       0       0
   287 ;;      Locals:         0       0       0       0       0       0       0       0       0
   288 ;;      Temps:          0       0       0       0       0       0       0       0       0
   289 ;;      Totals:         0       0       0       0       0       0       0       0       0
   290 ;;Total ram usage:        0 bytes
   291 ;; Hardware stack levels required when called:    3
   292 ;; This function calls:
   293 ;;		_LCD_Busy
   294 ;;		_LCD_ConstTextOut
   295 ;;		_LCD_Init
   296 ;;		_LCD_TextOut
   297 ;;		_LCD_Write
   298 ;;		_printNumber
   299 ;; This function is called by:
   300 ;;		Startup code after reset
   301 ;; This function uses a non-reentrant model
   302 ;;
   303                           
   304                           	psect	text0
   305  0008D0                     __ptext0:
   306                           	opt stack 0
   307  0008D0                     _main:
   308                           	opt stack 28
   309                           
   310                           ;main.c: 62: ADCON1 = 0x0F;
   311                           
   312                           ;incstack = 0
   313  0008D0  0E0F               	movlw	15
   314  0008D2  6EC1               	movwf	4033,c	;volatile
   315                           
   316                           ;main.c: 63: TRISC = 0x00;
   317  0008D4  0E00               	movlw	0
   318  0008D6  6E94               	movwf	3988,c	;volatile
   319                           
   320                           ;main.c: 64: PORTC = 0x00;
   321  0008D8  0E00               	movlw	0
   322  0008DA  6E82               	movwf	3970,c	;volatile
   323                           
   324                           ;main.c: 66: displayTODO = 0;
   325  0008DC  0E00               	movlw	0
   326  0008DE  6E2A               	movwf	_displayTODO,c
   327                           
   328                           ;main.c: 68: LCD_Init();
   329  0008E0  EC06  F004         	call	_LCD_Init	;wreg free
   330                           
   331                           ;main.c: 70: TRISBbits.TRISB0 = 1;
   332  0008E4  8093               	bsf	3987,0,c	;volatile
   333  0008E6  EC2A  F005         	call	_LCD_Busy	;wreg free
   334  0008EA  0900               	iorlw	0
   335  0008EC  A4D8               	btfss	status,2,c
   336  0008EE  D7FB               	goto	l102
   337  0008F0  908D               	bcf	3981,0,c	;volatile
   338  0008F2  0E80               	movlw	128
   339  0008F4  ECF7  F004         	call	_LCD_Write
   340  0008F8  0E01               	movlw	low STR_1
   341  0008FA  6E02               	movwf	LCD_ConstTextOut@text,c
   342  0008FC  0E08               	movlw	high STR_1
   343  0008FE  6E03               	movwf	LCD_ConstTextOut@text+1,c
   344  000900  ECD6  F005         	call	_LCD_ConstTextOut	;wreg free
   345  000904  EC2A  F005         	call	_LCD_Busy	;wreg free
   346  000908  0900               	iorlw	0
   347  00090A  A4D8               	btfss	status,2,c
   348  00090C  D7FB               	goto	l105
   349  00090E  908D               	bcf	3981,0,c	;volatile
   350  000910  0EC0               	movlw	192
   351  000912  ECF7  F004         	call	_LCD_Write
   352  000916  0E21               	movlw	low _btnText
   353  000918  6E02               	movwf	LCD_TextOut@text,c
   354  00091A  0E00               	movlw	high _btnText
   355  00091C  6E03               	movwf	LCD_TextOut@text+1,c
   356  00091E  ECF1  F005         	call	_LCD_TextOut	;wreg free
   357  000922  EC2A  F005         	call	_LCD_Busy	;wreg free
   358  000926  0900               	iorlw	0
   359  000928  A4D8               	btfss	status,2,c
   360  00092A  D7FB               	goto	l108
   361  00092C  908D               	bcf	3981,0,c	;volatile
   362  00092E  0E0C               	movlw	12
   363  000930  ECF7  F004         	call	_LCD_Write
   364  000934  EC2A  F005         	call	_LCD_Busy	;wreg free
   365  000938  0900               	iorlw	0
   366  00093A  A4D8               	btfss	status,2,c
   367  00093C  D7FB               	goto	l111
   368  00093E  908D               	bcf	3981,0,c	;volatile
   369  000940  0EC3               	movlw	195
   370  000942  ECF7  F004         	call	_LCD_Write
   371  000946                     
   372                           ;main.c: 80: if (PORTBbits.RB0 == 0) {
   373  000946  B081               	btfsc	3969,0,c	;volatile
   374  000948  D004               	goto	l114
   375                           
   376                           ;main.c: 82: cntButton++;
   377  00094A  4A28               	infsnz	_cntButton,f,c
   378  00094C  2A29               	incf	_cntButton+1,f,c
   379                           
   380                           ;main.c: 83: displayTODO = 1;
   381  00094E  0E01               	movlw	1
   382  000950  6E2A               	movwf	_displayTODO,c
   383  000952                     l114:
   384                           
   385                           ;main.c: 84: }
   386                           ;main.c: 86: if (displayTODO) {
   387  000952  502A               	movf	_displayTODO,w,c
   388  000954  B4D8               	btfsc	status,2,c
   389  000956  D7F7               	goto	l113
   390  000958                     u560:
   391                           
   392                           ;main.c: 87: while(LCD_Busy()){;} LATEbits.LATE0 = 0; LCD_Write(0x80 + (0x40 * 1) + 4);
   393  000958  EC2A  F005         	call	_LCD_Busy	;wreg free
   394  00095C  0900               	iorlw	0
   395  00095E  A4D8               	btfss	status,2,c
   396  000960  D7FB               	goto	u560
   397  000962  908D               	bcf	3981,0,c	;volatile
   398  000964  0EC4               	movlw	196
   399  000966  ECF7  F004         	call	_LCD_Write
   400                           
   401                           ;main.c: 88: printNumber(cntButton);
   402  00096A  C028  F008         	movff	_cntButton,printNumber@n
   403  00096E  C029  F009         	movff	_cntButton+1,printNumber@n+1
   404  000972  ECBE  F004         	call	_printNumber	;wreg free
   405                           
   406                           ;main.c: 89: displayTODO = 0;
   407  000976  0E00               	movlw	0
   408  000978  6E2A               	movwf	_displayTODO,c
   409  00097A  D7E5               	goto	l113
   410  00097C                     __end_of_main:
   411                           	opt stack 0
   412                           tblptru	equ	0xFF8
   413                           tblptrh	equ	0xFF7
   414                           tblptrl	equ	0xFF6
   415                           tablat	equ	0xFF5
   416                           postinc0	equ	0xFEE
   417                           postdec1	equ	0xFE5
   418                           fsr1l	equ	0xFE1
   419                           status	equ	0xFD8
   420                           
   421 ;; *************** function _printNumber *****************
   422 ;; Defined at:
   423 ;;		line 43 in file "main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;  n               2    7[COMRAM] unsigned int 
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  c               1   29[COMRAM] unsigned char 
   428 ;;  buf            20    9[COMRAM] unsigned char [20]
   429 ;;  str             2   30[COMRAM] PTR unsigned char 
   430 ;;		 -> printNumber@buf(20), 
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   440 ;;      Params:         2       0       0       0       0       0       0       0       0
   441 ;;      Locals:        23       0       0       0       0       0       0       0       0
   442 ;;      Temps:          0       0       0       0       0       0       0       0       0
   443 ;;      Totals:        25       0       0       0       0       0       0       0       0
   444 ;;Total ram usage:       25 bytes
   445 ;; Hardware stack levels used:    1
   446 ;; Hardware stack levels required when called:    2
   447 ;; This function calls:
   448 ;;		_LCD_TextOut
   449 ;;		___lwdiv
   450 ;;		___lwmod
   451 ;; This function is called by:
   452 ;;		_main
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           	psect	text1
   457  00097C                     __ptext1:
   458                           	opt stack 0
   459  00097C                     _printNumber:
   460                           	opt stack 28
   461                           
   462                           ;main.c: 45: char buf[20];
   463                           ;main.c: 46: char *str = &buf[sizeof (buf) - 1];
   464                           
   465                           ;incstack = 0
   466  00097C  0E1D               	movlw	low (printNumber@buf+19)
   467  00097E  6E1F               	movwf	printNumber@str,c
   468  000980  0E00               	movlw	high (printNumber@buf+19)
   469  000982  6E20               	movwf	printNumber@str+1,c
   470                           
   471                           ;main.c: 48: *str = '\0';
   472  000984  C01F  FFD9         	movff	printNumber@str,fsr2l
   473  000988  C020  FFDA         	movff	printNumber@str+1,fsr2h
   474  00098C  0E00               	movlw	0
   475  00098E  6EDF               	movwf	indf2,c
   476  000990                     
   477                           ;main.c: 51: char c = n % 10;
   478  000990  C008  F001         	movff	printNumber@n,___lwmod@dividend
   479  000994  C009  F002         	movff	printNumber@n+1,___lwmod@dividend+1
   480  000998  0E00               	movlw	0
   481  00099A  6E04               	movwf	___lwmod@divisor+1,c
   482  00099C  0E0A               	movlw	10
   483  00099E  6E03               	movwf	___lwmod@divisor,c
   484  0009A0  EC7D  F005         	call	___lwmod	;wreg free
   485  0009A4  5001               	movf	?___lwmod,w,c
   486  0009A6  6E1E               	movwf	printNumber@c,c
   487                           
   488                           ;main.c: 52: n /= 10;
   489  0009A8  C008  F001         	movff	printNumber@n,___lwdiv@dividend
   490  0009AC  C009  F002         	movff	printNumber@n+1,___lwdiv@dividend+1
   491  0009B0  0E00               	movlw	0
   492  0009B2  6E04               	movwf	___lwdiv@divisor+1,c
   493  0009B4  0E0A               	movlw	10
   494  0009B6  6E03               	movwf	___lwdiv@divisor,c
   495  0009B8  EC54  F005         	call	___lwdiv	;wreg free
   496  0009BC  C001  F008         	movff	?___lwdiv,printNumber@n
   497  0009C0  C002  F009         	movff	?___lwdiv+1,printNumber@n+1
   498                           
   499                           ;main.c: 54: *--str = c + '0';
   500  0009C4  501E               	movf	printNumber@c,w,c
   501  0009C6  0F30               	addlw	48
   502  0009C8  061F               	decf	printNumber@str,f,c
   503  0009CA  A0D8               	btfss	status,0,c
   504  0009CC  0620               	decf	printNumber@str+1,f,c
   505  0009CE  C01F  FFD9         	movff	printNumber@str,fsr2l
   506  0009D2  C020  FFDA         	movff	printNumber@str+1,fsr2h
   507  0009D6  6EDF               	movwf	indf2,c
   508                           
   509                           ;main.c: 55: } while (n);
   510  0009D8  5008               	movf	printNumber@n,w,c
   511  0009DA  1009               	iorwf	printNumber@n+1,w,c
   512  0009DC  A4D8               	btfss	status,2,c
   513  0009DE  D7D8               	goto	l94
   514                           
   515                           ;main.c: 57: LCD_TextOut(str);
   516  0009E0  C01F  F002         	movff	printNumber@str,LCD_TextOut@text
   517  0009E4  C020  F003         	movff	printNumber@str+1,LCD_TextOut@text+1
   518  0009E8  ECF1  F005         	call	_LCD_TextOut	;wreg free
   519  0009EC  0012               	return		;funcret
   520  0009EE                     __end_of_printNumber:
   521                           	opt stack 0
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           postinc0	equ	0xFEE
   527                           postdec1	equ	0xFE5
   528                           fsr1l	equ	0xFE1
   529                           indf2	equ	0xFDF
   530                           fsr2h	equ	0xFDA
   531                           fsr2l	equ	0xFD9
   532                           status	equ	0xFD8
   533                           
   534 ;; *************** function ___lwmod *****************
   535 ;; Defined at:
   536 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;  dividend        2    0[COMRAM] unsigned int 
   539 ;;  divisor         2    2[COMRAM] unsigned int 
   540 ;; Auto vars:     Size  Location     Type
   541 ;;  counter         1    4[COMRAM] unsigned char 
   542 ;; Return value:  Size  Location     Type
   543 ;;                  2    0[COMRAM] unsigned int 
   544 ;; Registers used:
   545 ;;		wreg, status,2, status,0
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   551 ;;      Params:         4       0       0       0       0       0       0       0       0
   552 ;;      Locals:         1       0       0       0       0       0       0       0       0
   553 ;;      Temps:          0       0       0       0       0       0       0       0       0
   554 ;;      Totals:         5       0       0       0       0       0       0       0       0
   555 ;;Total ram usage:        5 bytes
   556 ;; Hardware stack levels used:    1
   557 ;; This function calls:
   558 ;;		Nothing
   559 ;; This function is called by:
   560 ;;		_printNumber
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           	psect	text2
   565  000AFA                     __ptext2:
   566                           	opt stack 0
   567  000AFA                     ___lwmod:
   568                           	opt stack 29
   569                           
   570                           ;incstack = 0
   571  000AFA  5003               	movf	___lwmod@divisor,w,c
   572  000AFC  1004               	iorwf	___lwmod@divisor+1,w,c
   573  000AFE  B4D8               	btfsc	status,2,c
   574  000B00  D018               	goto	l540
   575  000B02  0E01               	movlw	1
   576  000B04  6E05               	movwf	___lwmod@counter,c
   577  000B06  D004               	goto	l535
   578  000B08  90D8               	bcf	status,0,c
   579  000B0A  3603               	rlcf	___lwmod@divisor,f,c
   580  000B0C  3604               	rlcf	___lwmod@divisor+1,f,c
   581  000B0E  2A05               	incf	___lwmod@counter,f,c
   582  000B10                     l535:
   583  000B10  AE04               	btfss	___lwmod@divisor+1,7,c
   584  000B12  D7FA               	goto	l536
   585  000B14                     u460:
   586  000B14  5003               	movf	___lwmod@divisor,w,c
   587  000B16  5C01               	subwf	___lwmod@dividend,w,c
   588  000B18  5004               	movf	___lwmod@divisor+1,w,c
   589  000B1A  5802               	subwfb	___lwmod@dividend+1,w,c
   590  000B1C  A0D8               	btfss	status,0,c
   591  000B1E  D004               	goto	l539
   592  000B20  5003               	movf	___lwmod@divisor,w,c
   593  000B22  5E01               	subwf	___lwmod@dividend,f,c
   594  000B24  5004               	movf	___lwmod@divisor+1,w,c
   595  000B26  5A02               	subwfb	___lwmod@dividend+1,f,c
   596  000B28                     l539:
   597  000B28  90D8               	bcf	status,0,c
   598  000B2A  3204               	rrcf	___lwmod@divisor+1,f,c
   599  000B2C  3203               	rrcf	___lwmod@divisor,f,c
   600  000B2E  2E05               	decfsz	___lwmod@counter,f,c
   601  000B30  D7F1               	goto	u460
   602  000B32                     l540:
   603  000B32  C001  F001         	movff	___lwmod@dividend,?___lwmod
   604  000B36  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   605  000B3A  0012               	return		;funcret
   606  000B3C                     __end_of___lwmod:
   607                           	opt stack 0
   608                           tblptru	equ	0xFF8
   609                           tblptrh	equ	0xFF7
   610                           tblptrl	equ	0xFF6
   611                           tablat	equ	0xFF5
   612                           postinc0	equ	0xFEE
   613                           postdec1	equ	0xFE5
   614                           fsr1l	equ	0xFE1
   615                           indf2	equ	0xFDF
   616                           fsr2h	equ	0xFDA
   617                           fsr2l	equ	0xFD9
   618                           status	equ	0xFD8
   619                           
   620 ;; *************** function ___lwdiv *****************
   621 ;; Defined at:
   622 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  dividend        2    0[COMRAM] unsigned int 
   625 ;;  divisor         2    2[COMRAM] unsigned int 
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  quotient        2    4[COMRAM] unsigned int 
   628 ;;  counter         1    6[COMRAM] unsigned char 
   629 ;; Return value:  Size  Location     Type
   630 ;;                  2    0[COMRAM] unsigned int 
   631 ;; Registers used:
   632 ;;		wreg, status,2, status,0
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   638 ;;      Params:         4       0       0       0       0       0       0       0       0
   639 ;;      Locals:         3       0       0       0       0       0       0       0       0
   640 ;;      Temps:          0       0       0       0       0       0       0       0       0
   641 ;;      Totals:         7       0       0       0       0       0       0       0       0
   642 ;;Total ram usage:        7 bytes
   643 ;; Hardware stack levels used:    1
   644 ;; This function calls:
   645 ;;		Nothing
   646 ;; This function is called by:
   647 ;;		_printNumber
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           	psect	text3
   652  000AA8                     __ptext3:
   653                           	opt stack 0
   654  000AA8                     ___lwdiv:
   655                           	opt stack 29
   656                           
   657                           ;incstack = 0
   658  000AA8  0E00               	movlw	0
   659  000AAA  6E06               	movwf	___lwdiv@quotient+1,c
   660  000AAC  0E00               	movlw	0
   661  000AAE  6E05               	movwf	___lwdiv@quotient,c
   662  000AB0  5003               	movf	___lwdiv@divisor,w,c
   663  000AB2  1004               	iorwf	___lwdiv@divisor+1,w,c
   664  000AB4  B4D8               	btfsc	status,2,c
   665  000AB6  D01C               	goto	l530
   666  000AB8  0E01               	movlw	1
   667  000ABA  6E07               	movwf	___lwdiv@counter,c
   668  000ABC  D004               	goto	l525
   669  000ABE  90D8               	bcf	status,0,c
   670  000AC0  3603               	rlcf	___lwdiv@divisor,f,c
   671  000AC2  3604               	rlcf	___lwdiv@divisor+1,f,c
   672  000AC4  2A07               	incf	___lwdiv@counter,f,c
   673  000AC6                     l525:
   674  000AC6  AE04               	btfss	___lwdiv@divisor+1,7,c
   675  000AC8  D7FA               	goto	l526
   676  000ACA                     u430:
   677  000ACA  90D8               	bcf	status,0,c
   678  000ACC  3605               	rlcf	___lwdiv@quotient,f,c
   679  000ACE  3606               	rlcf	___lwdiv@quotient+1,f,c
   680  000AD0  5003               	movf	___lwdiv@divisor,w,c
   681  000AD2  5C01               	subwf	___lwdiv@dividend,w,c
   682  000AD4  5004               	movf	___lwdiv@divisor+1,w,c
   683  000AD6  5802               	subwfb	___lwdiv@dividend+1,w,c
   684  000AD8  A0D8               	btfss	status,0,c
   685  000ADA  D005               	goto	l529
   686  000ADC  5003               	movf	___lwdiv@divisor,w,c
   687  000ADE  5E01               	subwf	___lwdiv@dividend,f,c
   688  000AE0  5004               	movf	___lwdiv@divisor+1,w,c
   689  000AE2  5A02               	subwfb	___lwdiv@dividend+1,f,c
   690  000AE4  8005               	bsf	___lwdiv@quotient,0,c
   691  000AE6                     l529:
   692  000AE6  90D8               	bcf	status,0,c
   693  000AE8  3204               	rrcf	___lwdiv@divisor+1,f,c
   694  000AEA  3203               	rrcf	___lwdiv@divisor,f,c
   695  000AEC  2E07               	decfsz	___lwdiv@counter,f,c
   696  000AEE  D7ED               	goto	u430
   697  000AF0                     l530:
   698  000AF0  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
   699  000AF4  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
   700  000AF8  0012               	return		;funcret
   701  000AFA                     __end_of___lwdiv:
   702                           	opt stack 0
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           postinc0	equ	0xFEE
   708                           postdec1	equ	0xFE5
   709                           fsr1l	equ	0xFE1
   710                           indf2	equ	0xFDF
   711                           fsr2h	equ	0xFDA
   712                           fsr2l	equ	0xFD9
   713                           status	equ	0xFD8
   714                           
   715 ;; *************** function _LCD_TextOut *****************
   716 ;; Defined at:
   717 ;;		line 301 in file "LCD_16x2.h"
   718 ;; Parameters:    Size  Location     Type
   719 ;;  text            2    1[COMRAM] PTR unsigned char 
   720 ;;		 -> btnText(7), printNumber@buf(20), 
   721 ;; Auto vars:     Size  Location     Type
   722 ;;		None
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   732 ;;      Params:         2       0       0       0       0       0       0       0       0
   733 ;;      Locals:         0       0       0       0       0       0       0       0       0
   734 ;;      Temps:          0       0       0       0       0       0       0       0       0
   735 ;;      Totals:         2       0       0       0       0       0       0       0       0
   736 ;;Total ram usage:        2 bytes
   737 ;; Hardware stack levels used:    1
   738 ;; Hardware stack levels required when called:    1
   739 ;; This function calls:
   740 ;;		_LCD_Busy
   741 ;;		_LCD_Write
   742 ;; This function is called by:
   743 ;;		_printNumber
   744 ;;		_main
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           	psect	text4
   749  000BE2                     __ptext4:
   750                           	opt stack 0
   751  000BE2                     _LCD_TextOut:
   752                           	opt stack 28
   753                           
   754                           ;LCD_16x2.h: 302: while (*text) {
   755                           
   756                           ;incstack = 0
   757  000BE2  D00F               	goto	l64
   758  000BE4                     
   759                           ;LCD_16x2.h: 303: while(LCD_Busy()){;} LATEbits.LATE0 = 1; LCD_Write(*text);
   760  000BE4  EC2A  F005         	call	_LCD_Busy	;wreg free
   761  000BE8  0900               	iorlw	0
   762  000BEA  A4D8               	btfss	status,2,c
   763  000BEC  D7FB               	goto	l65
   764  000BEE  808D               	bsf	3981,0,c	;volatile
   765  000BF0  C002  FFD9         	movff	LCD_TextOut@text,fsr2l
   766  000BF4  C003  FFDA         	movff	LCD_TextOut@text+1,fsr2h
   767  000BF8  50DF               	movf	indf2,w,c
   768  000BFA  ECF7  F004         	call	_LCD_Write
   769                           
   770                           ;LCD_16x2.h: 304: text++;
   771  000BFE  4A02               	infsnz	LCD_TextOut@text,f,c
   772  000C00  2A03               	incf	LCD_TextOut@text+1,f,c
   773  000C02                     l64:
   774  000C02  C002  FFD9         	movff	LCD_TextOut@text,fsr2l
   775  000C06  C003  FFDA         	movff	LCD_TextOut@text+1,fsr2h
   776  000C0A  50DF               	movf	indf2,w,c
   777  000C0C  B4D8               	btfsc	status,2,c
   778  000C0E  0012               	return	
   779  000C10  D7E9               	goto	l65
   780  000C12                     __end_of_LCD_TextOut:
   781                           	opt stack 0
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           postinc0	equ	0xFEE
   787                           postdec1	equ	0xFE5
   788                           fsr1l	equ	0xFE1
   789                           indf2	equ	0xFDF
   790                           fsr2h	equ	0xFDA
   791                           fsr2l	equ	0xFD9
   792                           status	equ	0xFD8
   793                           
   794 ;; *************** function _LCD_Init *****************
   795 ;; Defined at:
   796 ;;		line 213 in file "LCD_16x2.h"
   797 ;; Parameters:    Size  Location     Type
   798 ;;		None
   799 ;; Auto vars:     Size  Location     Type
   800 ;;		None
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, status,2, status,0, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   810 ;;      Params:         0       0       0       0       0       0       0       0       0
   811 ;;      Locals:         0       0       0       0       0       0       0       0       0
   812 ;;      Temps:          1       0       0       0       0       0       0       0       0
   813 ;;      Totals:         1       0       0       0       0       0       0       0       0
   814 ;;Total ram usage:        1 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    1
   817 ;; This function calls:
   818 ;;		_LCD_Busy
   819 ;;		_LCD_Write
   820 ;;		_LCD_Write_Nibble
   821 ;; This function is called by:
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text5
   827  00080C                     __ptext5:
   828                           	opt stack 0
   829  00080C                     _LCD_Init:
   830                           	opt stack 29
   831                           
   832                           ;LCD_16x2.h: 214: LATEbits.LATE1 = 0;
   833                           
   834                           ;incstack = 0
   835  00080C  928D               	bcf	3981,1,c	;volatile
   836                           
   837                           ;LCD_16x2.h: 215: TRISEbits.TRISE1 = 0;
   838  00080E  9296               	bcf	3990,1,c	;volatile
   839                           
   840                           ;LCD_16x2.h: 216: LATEbits.LATE0 = 0;
   841  000810  908D               	bcf	3981,0,c	;volatile
   842                           
   843                           ;LCD_16x2.h: 217: TRISEbits.TRISE0 = 0;
   844  000812  9096               	bcf	3990,0,c	;volatile
   845                           
   846                           ;LCD_16x2.h: 218: LATEbits.LATE2 = 0;
   847  000814  948D               	bcf	3981,2,c	;volatile
   848                           
   849                           ;LCD_16x2.h: 219: TRISEbits.TRISE2 = 0;
   850  000816  9496               	bcf	3990,2,c	;volatile
   851                           
   852                           ;LCD_16x2.h: 221: TRISD &= 0x0F;
   853  000818  0E0F               	movlw	15
   854  00081A  1695               	andwf	3989,f,c	;volatile
   855                           
   856                           ;LCD_16x2.h: 223: LCD_busy_cnt = 1;
   857  00081C  0E00               	movlw	0
   858  00081E  6E2D               	movwf	_LCD_busy_cnt+1,c
   859  000820  0E01               	movlw	1
   860  000822  6E2C               	movwf	_LCD_busy_cnt,c
   861                           
   862                           ;LCD_16x2.h: 225: _delay((unsigned long)((15)*(1000000/4000.0)));
   863  000824  0E05               	movlw	5
   864  000826  6E02               	movwf	??_LCD_Init& (0+255),c
   865  000828  0EDE               	movlw	222
   866  00082A                     u587:
   867  00082A  2EE8               	decfsz	wreg,f,c
   868  00082C  D7FE               	bra	u587
   869  00082E  2E02               	decfsz	??_LCD_Init& (0+255),f,c
   870  000830  D7FC               	bra	u587
   871                           
   872                           ;LCD_16x2.h: 227: LCD_Write_Nibble(0x30);
   873  000832  0E30               	movlw	48
   874  000834  EC9E  F005         	call	_LCD_Write_Nibble
   875                           
   876                           ;LCD_16x2.h: 228: _delay((unsigned long)((5)*(1000000/4000.0)));
   877  000838  0EFA               	movlw	250
   878  00083A                     u597:
   879  00083A  D000               	nop2	
   880  00083C  2EE8               	decfsz	wreg,f,c
   881  00083E  D7FD               	bra	u597
   882                           
   883                           ;LCD_16x2.h: 229: LCD_Write_Nibble(0x30);
   884  000840  0E30               	movlw	48
   885  000842  EC9E  F005         	call	_LCD_Write_Nibble
   886                           
   887                           ;LCD_16x2.h: 230: _delay((unsigned long)((5)*(1000000/4000.0)));
   888  000846  0EFA               	movlw	250
   889  000848                     u607:
   890  000848  D000               	nop2	
   891  00084A  2EE8               	decfsz	wreg,f,c
   892  00084C  D7FD               	bra	u607
   893                           
   894                           ;LCD_16x2.h: 231: LCD_Write_Nibble(0x30);
   895  00084E  0E30               	movlw	48
   896  000850  EC9E  F005         	call	_LCD_Write_Nibble
   897                           
   898                           ;LCD_16x2.h: 232: _delay((unsigned long)((5)*(1000000/4000.0)));
   899  000854  0EFA               	movlw	250
   900  000856                     u617:
   901  000856  D000               	nop2	
   902  000858  2EE8               	decfsz	wreg,f,c
   903  00085A  D7FD               	bra	u617
   904                           
   905                           ;LCD_16x2.h: 241: LCD_Write_Nibble(0x20);
   906  00085C  0E20               	movlw	32
   907  00085E  EC9E  F005         	call	_LCD_Write_Nibble
   908  000862                     
   909                           ;LCD_16x2.h: 243: ;
   910  000862  EC2A  F005         	call	_LCD_Busy	;wreg free
   911  000866  0900               	iorlw	0
   912  000868  A4D8               	btfss	status,2,c
   913  00086A  D7FB               	goto	l38
   914  00086C                     u240:
   915                           
   916                           ;LCD_16x2.h: 244: }
   917                           ;LCD_16x2.h: 245: while(LCD_Busy()){;} LATEbits.LATE0 = 0; LCD_Write(0x28);
   918  00086C  EC2A  F005         	call	_LCD_Busy	;wreg free
   919  000870  0900               	iorlw	0
   920  000872  A4D8               	btfss	status,2,c
   921  000874  D7FB               	goto	u240
   922  000876  908D               	bcf	3981,0,c	;volatile
   923  000878  0E28               	movlw	40
   924  00087A  ECF7  F004         	call	_LCD_Write
   925  00087E  EC2A  F005         	call	_LCD_Busy	;wreg free
   926  000882  0900               	iorlw	0
   927  000884  A4D8               	btfss	status,2,c
   928  000886  D7FB               	goto	l44
   929  000888  908D               	bcf	3981,0,c	;volatile
   930  00088A  0E0C               	movlw	12
   931  00088C  ECF7  F004         	call	_LCD_Write
   932  000890  EC2A  F005         	call	_LCD_Busy	;wreg free
   933  000894  0900               	iorlw	0
   934  000896  A4D8               	btfss	status,2,c
   935  000898  D7FB               	goto	l47
   936  00089A  908D               	bcf	3981,0,c	;volatile
   937  00089C  0E06               	movlw	6
   938  00089E  ECF7  F004         	call	_LCD_Write
   939  0008A2  EC2A  F005         	call	_LCD_Busy	;wreg free
   940  0008A6  0900               	iorlw	0
   941  0008A8  A4D8               	btfss	status,2,c
   942  0008AA  D7FB               	goto	l50
   943  0008AC  908D               	bcf	3981,0,c	;volatile
   944  0008AE  0E01               	movlw	1
   945  0008B0  ECF7  F004         	call	_LCD_Write
   946  0008B4  EC2A  F005         	call	_LCD_Busy	;wreg free
   947  0008B8  0900               	iorlw	0
   948  0008BA  A4D8               	btfss	status,2,c
   949  0008BC  D7FB               	goto	l53
   950  0008BE  908D               	bcf	3981,0,c	;volatile
   951  0008C0  0E02               	movlw	2
   952  0008C2  ECF7  F004         	call	_LCD_Write
   953  0008C6  0EFA               	movlw	250
   954  0008C8                     u627:
   955  0008C8  D000               	nop2	
   956  0008CA  2EE8               	decfsz	wreg,f,c
   957  0008CC  D7FD               	bra	u627
   958  0008CE  0012               	return		;funcret
   959  0008D0                     __end_of_LCD_Init:
   960                           	opt stack 0
   961                           tblptru	equ	0xFF8
   962                           tblptrh	equ	0xFF7
   963                           tblptrl	equ	0xFF6
   964                           tablat	equ	0xFF5
   965                           postinc0	equ	0xFEE
   966                           wreg	equ	0xFE8
   967                           postdec1	equ	0xFE5
   968                           fsr1l	equ	0xFE1
   969                           indf2	equ	0xFDF
   970                           fsr2h	equ	0xFDA
   971                           fsr2l	equ	0xFD9
   972                           status	equ	0xFD8
   973                           
   974 ;; *************** function _LCD_Write_Nibble *****************
   975 ;; Defined at:
   976 ;;		line 265 in file "LCD_16x2.h"
   977 ;; Parameters:    Size  Location     Type
   978 ;;  value           1    wreg     unsigned char 
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  value           1    0[COMRAM] unsigned char 
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   990 ;;      Params:         0       0       0       0       0       0       0       0       0
   991 ;;      Locals:         1       0       0       0       0       0       0       0       0
   992 ;;      Temps:          0       0       0       0       0       0       0       0       0
   993 ;;      Totals:         1       0       0       0       0       0       0       0       0
   994 ;;Total ram usage:        1 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		_LCD_Init
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text6
  1004  000B3C                     __ptext6:
  1005                           	opt stack 0
  1006  000B3C                     _LCD_Write_Nibble:
  1007                           	opt stack 29
  1008                           
  1009                           ;incstack = 0
  1010                           ;LCD_Write_Nibble@value stored from wreg
  1011  000B3C  6E01               	movwf	LCD_Write_Nibble@value,c
  1012                           
  1013                           ;LCD_16x2.h: 266: LCD_data.all = value;
  1014  000B3E  C001  F02B         	movff	LCD_Write_Nibble@value,_LCD_data
  1015                           
  1016                           ;LCD_16x2.h: 267: LATEbits.LATE0 = 0;
  1017  000B42  908D               	bcf	3981,0,c	;volatile
  1018                           
  1019                           ;LCD_16x2.h: 268: LATEbits.LATE1 = 0;
  1020  000B44  928D               	bcf	3981,1,c	;volatile
  1021                           
  1022                           ;LCD_16x2.h: 270: LATDbits.LATD4 = LCD_data.bit4;
  1023  000B46  A82B               	btfss	_LCD_data,4,c
  1024  000B48  D002               	bra	u125
  1025  000B4A  888C               	bsf	3980,4,c	;volatile
  1026  000B4C  D001               	bra	u127
  1027  000B4E                     u125:
  1028  000B4E  988C               	bcf	3980,4,c	;volatile
  1029  000B50                     u127:
  1030                           
  1031                           ;LCD_16x2.h: 271: LATDbits.LATD5 = LCD_data.bit5;
  1032  000B50  AA2B               	btfss	_LCD_data,5,c
  1033  000B52  D002               	bra	u135
  1034  000B54  8A8C               	bsf	3980,5,c	;volatile
  1035  000B56  D001               	bra	u137
  1036  000B58                     u135:
  1037  000B58  9A8C               	bcf	3980,5,c	;volatile
  1038  000B5A                     u137:
  1039                           
  1040                           ;LCD_16x2.h: 272: LATDbits.LATD6 = LCD_data.bit6;
  1041  000B5A  AC2B               	btfss	_LCD_data,6,c
  1042  000B5C  D002               	bra	u145
  1043  000B5E  8C8C               	bsf	3980,6,c	;volatile
  1044  000B60  D001               	bra	u147
  1045  000B62                     u145:
  1046  000B62  9C8C               	bcf	3980,6,c	;volatile
  1047  000B64                     u147:
  1048                           
  1049                           ;LCD_16x2.h: 273: LATDbits.LATD7 = LCD_data.bit7;
  1050  000B64  AE2B               	btfss	_LCD_data,7,c
  1051  000B66  D002               	bra	u155
  1052  000B68  8E8C               	bsf	3980,7,c	;volatile
  1053  000B6A  D001               	bra	u157
  1054  000B6C                     u155:
  1055  000B6C  9E8C               	bcf	3980,7,c	;volatile
  1056  000B6E                     u157:
  1057                           
  1058                           ;LCD_16x2.h: 274: LATEbits.LATE2 = 1; __nop(); LATEbits.LATE2 = 0;;
  1059  000B6E  848D               	bsf	3981,2,c	;volatile
  1060  000B70  F000               	nop	
  1061  000B72  948D               	bcf	3981,2,c	;volatile
  1062  000B74  0012               	return		;funcret
  1063  000B76                     __end_of_LCD_Write_Nibble:
  1064                           	opt stack 0
  1065                           tblptru	equ	0xFF8
  1066                           tblptrh	equ	0xFF7
  1067                           tblptrl	equ	0xFF6
  1068                           tablat	equ	0xFF5
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           postdec1	equ	0xFE5
  1072                           fsr1l	equ	0xFE1
  1073                           indf2	equ	0xFDF
  1074                           fsr2h	equ	0xFDA
  1075                           fsr2l	equ	0xFD9
  1076                           status	equ	0xFD8
  1077                           
  1078 ;; *************** function _LCD_ConstTextOut *****************
  1079 ;; Defined at:
  1080 ;;		line 312 in file "LCD_16x2.h"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;  text            2    1[COMRAM] PTR const unsigned char 
  1083 ;;		 -> STR_1(9), 
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;		None
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1095 ;;      Params:         2       0       0       0       0       0       0       0       0
  1096 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1098 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1099 ;;Total ram usage:        2 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    1
  1102 ;; This function calls:
  1103 ;;		_LCD_Busy
  1104 ;;		_LCD_Write
  1105 ;; This function is called by:
  1106 ;;		_main
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text7
  1111  000BAC                     __ptext7:
  1112                           	opt stack 0
  1113  000BAC                     _LCD_ConstTextOut:
  1114                           	opt stack 29
  1115                           
  1116                           ;LCD_16x2.h: 313: while (*text) {
  1117                           
  1118                           ;incstack = 0
  1119  000BAC  D010               	goto	l73
  1120  000BAE                     
  1121                           ;LCD_16x2.h: 314: while(LCD_Busy()){;} LATEbits.LATE0 = 1; LCD_Write(*text);
  1122  000BAE  EC2A  F005         	call	_LCD_Busy	;wreg free
  1123  000BB2  0900               	iorlw	0
  1124  000BB4  A4D8               	btfss	status,2,c
  1125  000BB6  D7FB               	goto	l74
  1126  000BB8  808D               	bsf	3981,0,c	;volatile
  1127  000BBA  C002  FFF6         	movff	LCD_ConstTextOut@text,tblptrl
  1128  000BBE  C003  FFF7         	movff	LCD_ConstTextOut@text+1,tblptrh
  1129  000BC2                     	if	0	;tblptru may be non-zero
  1130  000BC2                     	endif
  1131  000BC2                     	if	0	;tblptru may be non-zero
  1132  000BC2                     	endif
  1133  000BC2  0008               	tblrd		*
  1134  000BC4  50F5               	movf	tablat,w,c
  1135  000BC6  ECF7  F004         	call	_LCD_Write
  1136                           
  1137                           ;LCD_16x2.h: 315: text++;
  1138  000BCA  4A02               	infsnz	LCD_ConstTextOut@text,f,c
  1139  000BCC  2A03               	incf	LCD_ConstTextOut@text+1,f,c
  1140  000BCE                     l73:
  1141  000BCE  C002  FFF6         	movff	LCD_ConstTextOut@text,tblptrl
  1142  000BD2  C003  FFF7         	movff	LCD_ConstTextOut@text+1,tblptrh
  1143  000BD6                     	if	0	;tblptru may be non-zero
  1144  000BD6                     	endif
  1145  000BD6                     	if	0	;tblptru may be non-zero
  1146  000BD6                     	endif
  1147  000BD6  0008               	tblrd		*
  1148  000BD8  50F5               	movf	tablat,w,c
  1149  000BDA  0900               	iorlw	0
  1150  000BDC  B4D8               	btfsc	status,2,c
  1151  000BDE  0012               	return	
  1152  000BE0  D7E6               	goto	l74
  1153  000BE2                     __end_of_LCD_ConstTextOut:
  1154                           	opt stack 0
  1155                           tblptru	equ	0xFF8
  1156                           tblptrh	equ	0xFF7
  1157                           tblptrl	equ	0xFF6
  1158                           tablat	equ	0xFF5
  1159                           postinc0	equ	0xFEE
  1160                           wreg	equ	0xFE8
  1161                           postdec1	equ	0xFE5
  1162                           fsr1l	equ	0xFE1
  1163                           indf2	equ	0xFDF
  1164                           fsr2h	equ	0xFDA
  1165                           fsr2l	equ	0xFD9
  1166                           status	equ	0xFD8
  1167                           
  1168 ;; *************** function _LCD_Write *****************
  1169 ;; Defined at:
  1170 ;;		line 279 in file "LCD_16x2.h"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  value           1    wreg     unsigned char 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  value           1    0[COMRAM] unsigned char 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1184 ;;      Params:         0       0       0       0       0       0       0       0       0
  1185 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1186 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1187 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1188 ;;Total ram usage:        1 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; This function calls:
  1191 ;;		Nothing
  1192 ;; This function is called by:
  1193 ;;		_LCD_Init
  1194 ;;		_LCD_TextOut
  1195 ;;		_LCD_ConstTextOut
  1196 ;;		_main
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text8
  1201  0009EE                     __ptext8:
  1202                           	opt stack 0
  1203  0009EE                     _LCD_Write:
  1204                           	opt stack 28
  1205                           
  1206                           ;incstack = 0
  1207                           ;LCD_Write@value stored from wreg
  1208  0009EE  6E01               	movwf	LCD_Write@value,c
  1209                           
  1210                           ;LCD_16x2.h: 280: LCD_data.all = value;
  1211  0009F0  C001  F02B         	movff	LCD_Write@value,_LCD_data
  1212                           
  1213                           ;LCD_16x2.h: 281: LATEbits.LATE1 = 0;
  1214  0009F4  928D               	bcf	3981,1,c	;volatile
  1215                           
  1216                           ;LCD_16x2.h: 283: LATDbits.LATD7 = LCD_data.bit7;
  1217  0009F6  AE2B               	btfss	_LCD_data,7,c
  1218  0009F8  D002               	bra	u45
  1219  0009FA  8E8C               	bsf	3980,7,c	;volatile
  1220  0009FC  D001               	bra	u47
  1221  0009FE                     u45:
  1222  0009FE  9E8C               	bcf	3980,7,c	;volatile
  1223  000A00                     u47:
  1224                           
  1225                           ;LCD_16x2.h: 284: LATDbits.LATD6 = LCD_data.bit6;
  1226  000A00  AC2B               	btfss	_LCD_data,6,c
  1227  000A02  D002               	bra	u55
  1228  000A04  8C8C               	bsf	3980,6,c	;volatile
  1229  000A06  D001               	bra	u57
  1230  000A08                     u55:
  1231  000A08  9C8C               	bcf	3980,6,c	;volatile
  1232  000A0A                     u57:
  1233                           
  1234                           ;LCD_16x2.h: 285: LATDbits.LATD5 = LCD_data.bit5;
  1235  000A0A  AA2B               	btfss	_LCD_data,5,c
  1236  000A0C  D002               	bra	u65
  1237  000A0E  8A8C               	bsf	3980,5,c	;volatile
  1238  000A10  D001               	bra	u67
  1239  000A12                     u65:
  1240  000A12  9A8C               	bcf	3980,5,c	;volatile
  1241  000A14                     u67:
  1242                           
  1243                           ;LCD_16x2.h: 286: LATDbits.LATD4 = LCD_data.bit4;
  1244  000A14  A82B               	btfss	_LCD_data,4,c
  1245  000A16  D002               	bra	u75
  1246  000A18  888C               	bsf	3980,4,c	;volatile
  1247  000A1A  D001               	bra	u77
  1248  000A1C                     u75:
  1249  000A1C  988C               	bcf	3980,4,c	;volatile
  1250  000A1E                     u77:
  1251                           
  1252                           ;LCD_16x2.h: 288: LATEbits.LATE2 = 1; __nop(); LATEbits.LATE2 = 0;;
  1253  000A1E  848D               	bsf	3981,2,c	;volatile
  1254  000A20  F000               	nop	
  1255  000A22  948D               	bcf	3981,2,c	;volatile
  1256                           
  1257                           ;LCD_16x2.h: 290: LATDbits.LATD7 = LCD_data.bit3;
  1258  000A24  A62B               	btfss	_LCD_data,3,c
  1259  000A26  D002               	bra	u85
  1260  000A28  8E8C               	bsf	3980,7,c	;volatile
  1261  000A2A  D001               	bra	u87
  1262  000A2C                     u85:
  1263  000A2C  9E8C               	bcf	3980,7,c	;volatile
  1264  000A2E                     u87:
  1265                           
  1266                           ;LCD_16x2.h: 291: LATDbits.LATD6 = LCD_data.bit2;
  1267  000A2E  A42B               	btfss	_LCD_data,2,c
  1268  000A30  D002               	bra	u95
  1269  000A32  8C8C               	bsf	3980,6,c	;volatile
  1270  000A34  D001               	bra	u97
  1271  000A36                     u95:
  1272  000A36  9C8C               	bcf	3980,6,c	;volatile
  1273  000A38                     u97:
  1274                           
  1275                           ;LCD_16x2.h: 292: LATDbits.LATD5 = LCD_data.bit1;
  1276  000A38  A22B               	btfss	_LCD_data,1,c
  1277  000A3A  D002               	bra	u105
  1278  000A3C  8A8C               	bsf	3980,5,c	;volatile
  1279  000A3E  D001               	bra	u107
  1280  000A40                     u105:
  1281  000A40  9A8C               	bcf	3980,5,c	;volatile
  1282  000A42                     u107:
  1283                           
  1284                           ;LCD_16x2.h: 293: LATDbits.LATD4 = LCD_data.bit0;
  1285  000A42  A02B               	btfss	_LCD_data,0,c
  1286  000A44  D002               	bra	u115
  1287  000A46  888C               	bsf	3980,4,c	;volatile
  1288  000A48  D001               	bra	u117
  1289  000A4A                     u115:
  1290  000A4A  988C               	bcf	3980,4,c	;volatile
  1291  000A4C                     u117:
  1292                           
  1293                           ;LCD_16x2.h: 294: LATEbits.LATE2 = 1; __nop(); LATEbits.LATE2 = 0;;
  1294  000A4C  848D               	bsf	3981,2,c	;volatile
  1295  000A4E  F000               	nop	
  1296  000A50  948D               	bcf	3981,2,c	;volatile
  1297  000A52  0012               	return		;funcret
  1298  000A54                     __end_of_LCD_Write:
  1299                           	opt stack 0
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           tblptrl	equ	0xFF6
  1303                           tablat	equ	0xFF5
  1304                           postinc0	equ	0xFEE
  1305                           wreg	equ	0xFE8
  1306                           postdec1	equ	0xFE5
  1307                           fsr1l	equ	0xFE1
  1308                           indf2	equ	0xFDF
  1309                           fsr2h	equ	0xFDA
  1310                           fsr2l	equ	0xFD9
  1311                           status	equ	0xFD8
  1312                           
  1313 ;; *************** function _LCD_Busy *****************
  1314 ;; Defined at:
  1315 ;;		line 321 in file "LCD_16x2.h"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      unsigned char 
  1322 ;; Registers used:
  1323 ;;		wreg, status,2, status,0
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1329 ;;      Params:         0       0       0       0       0       0       0       0       0
  1330 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1331 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1332 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1333 ;;Total ram usage:        0 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_LCD_Init
  1339 ;;		_LCD_TextOut
  1340 ;;		_LCD_ConstTextOut
  1341 ;;		_main
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text9
  1346  000A54                     __ptext9:
  1347                           	opt stack 0
  1348  000A54                     _LCD_Busy:
  1349                           	opt stack 28
  1350                           
  1351                           ;LCD_16x2.h: 322: if (LCD_busy_cnt >= 100) {
  1352                           
  1353                           ;incstack = 0
  1354  000A54  502D               	movf	_LCD_busy_cnt+1,w,c
  1355  000A56  E104               	bnz	u10
  1356  000A58  0E64               	movlw	100
  1357  000A5A  5C2C               	subwf	_LCD_busy_cnt,w,c
  1358  000A5C  A0D8               	btfss	status,0,c
  1359  000A5E  D006               	goto	l82
  1360  000A60                     u10:
  1361                           
  1362                           ;LCD_16x2.h: 323: LCD_busy_cnt = 1;
  1363  000A60  0E00               	movlw	0
  1364  000A62  6E2D               	movwf	_LCD_busy_cnt+1,c
  1365  000A64  0E01               	movlw	1
  1366  000A66  6E2C               	movwf	_LCD_busy_cnt,c
  1367                           
  1368                           ;LCD_16x2.h: 324: return 0;
  1369  000A68  0E00               	movlw	0
  1370  000A6A  0012               	return	
  1371  000A6C                     l82:
  1372                           
  1373                           ;LCD_16x2.h: 325: }
  1374                           ;LCD_16x2.h: 327: LATEbits.LATE1 = 1;
  1375  000A6C  828D               	bsf	3981,1,c	;volatile
  1376                           
  1377                           ;LCD_16x2.h: 328: LATEbits.LATE0 = 0;
  1378  000A6E  908D               	bcf	3981,0,c	;volatile
  1379                           
  1380                           ;LCD_16x2.h: 329: TRISD |= 0xF0;
  1381  000A70  0EF0               	movlw	240
  1382  000A72  1295               	iorwf	3989,f,c	;volatile
  1383                           
  1384                           ;LCD_16x2.h: 331: LATEbits.LATE2 = 1;;
  1385  000A74  848D               	bsf	3981,2,c	;volatile
  1386                           
  1387                           ;LCD_16x2.h: 332: __nop();
  1388  000A76  F000               	nop	
  1389                           
  1390                           ;LCD_16x2.h: 333: LCD_data.bit7 = PORTDbits.RD7;
  1391  000A78  AE83               	btfss	3971,7,c	;volatile
  1392  000A7A  D002               	bra	u25
  1393  000A7C  8E2B               	bsf	_LCD_data,7,c
  1394  000A7E  D001               	bra	u27
  1395  000A80                     u25:
  1396  000A80  9E2B               	bcf	_LCD_data,7,c
  1397  000A82                     u27:
  1398                           
  1399                           ;LCD_16x2.h: 334: LATEbits.LATE2 = 0;;
  1400  000A82  948D               	bcf	3981,2,c	;volatile
  1401                           
  1402                           ;LCD_16x2.h: 335: LATEbits.LATE2 = 1;;
  1403  000A84  848D               	bsf	3981,2,c	;volatile
  1404                           
  1405                           ;LCD_16x2.h: 336: __nop();
  1406  000A86  F000               	nop	
  1407                           
  1408                           ;LCD_16x2.h: 337: LATEbits.LATE2 = 0;;
  1409  000A88  948D               	bcf	3981,2,c	;volatile
  1410                           
  1411                           ;LCD_16x2.h: 339: TRISD &= 0x0F;
  1412  000A8A  0E0F               	movlw	15
  1413  000A8C  1695               	andwf	3989,f,c	;volatile
  1414                           
  1415                           ;LCD_16x2.h: 340: LATEbits.LATE1 = 0;
  1416  000A8E  928D               	bcf	3981,1,c	;volatile
  1417                           
  1418                           ;LCD_16x2.h: 342: if (LCD_data.bit7 == 1) {
  1419  000A90  AE2B               	btfss	_LCD_data,7,c
  1420  000A92  D004               	goto	l84
  1421                           
  1422                           ;LCD_16x2.h: 343: LCD_busy_cnt++;
  1423  000A94  4A2C               	infsnz	_LCD_busy_cnt,f,c
  1424  000A96  2A2D               	incf	_LCD_busy_cnt+1,f,c
  1425                           
  1426                           ;LCD_16x2.h: 344: return 1;
  1427  000A98  0E01               	movlw	1
  1428                           
  1429                           ;LCD_16x2.h: 345: } else {
  1430  000A9A  0012               	return	
  1431  000A9C                     l84:
  1432                           
  1433                           ;LCD_16x2.h: 346: LCD_busy_cnt = 1;
  1434  000A9C  0E00               	movlw	0
  1435  000A9E  6E2D               	movwf	_LCD_busy_cnt+1,c
  1436  000AA0  0E01               	movlw	1
  1437  000AA2  6E2C               	movwf	_LCD_busy_cnt,c
  1438                           
  1439                           ;LCD_16x2.h: 347: return 0;
  1440  000AA4  0E00               	movlw	0
  1441  000AA6  0012               	return	
  1442  000AA8                     __end_of_LCD_Busy:
  1443                           	opt stack 0
  1444                           tblptru	equ	0xFF8
  1445                           tblptrh	equ	0xFF7
  1446                           tblptrl	equ	0xFF6
  1447                           tablat	equ	0xFF5
  1448                           postinc0	equ	0xFEE
  1449                           wreg	equ	0xFE8
  1450                           postdec1	equ	0xFE5
  1451                           fsr1l	equ	0xFE1
  1452                           indf2	equ	0xFDF
  1453                           fsr2h	equ	0xFDA
  1454                           fsr2l	equ	0xFD9
  1455                           status	equ	0xFD8
  1456                           tblptru	equ	0xFF8
  1457                           tblptrh	equ	0xFF7
  1458                           tblptrl	equ	0xFF6
  1459                           tablat	equ	0xFF5
  1460                           postinc0	equ	0xFEE
  1461                           wreg	equ	0xFE8
  1462                           postdec1	equ	0xFE5
  1463                           fsr1l	equ	0xFE1
  1464                           indf2	equ	0xFDF
  1465                           fsr2h	equ	0xFDA
  1466                           fsr2l	equ	0xFD9
  1467                           status	equ	0xFD8
  1468                           
  1469                           	psect	rparam
  1470  0000                     tblptru	equ	0xFF8
  1471                           tblptrh	equ	0xFF7
  1472                           tblptrl	equ	0xFF6
  1473                           tablat	equ	0xFF5
  1474                           postinc0	equ	0xFEE
  1475                           wreg	equ	0xFE8
  1476                           postdec1	equ	0xFE5
  1477                           fsr1l	equ	0xFE1
  1478                           indf2	equ	0xFDF
  1479                           fsr2h	equ	0xFDA
  1480                           fsr2l	equ	0xFD9
  1481                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        7
    BSS         4
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      45
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printNumber@str	PTR unsigned char  size(2) Largest target is 20
		 -> printNumber@buf(COMRAM[20]), 

    LCD_ConstTextOut@text	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    LCD_TextOut@text	PTR unsigned char  size(2) Largest target is 20
		 -> btnText(COMRAM[7]), printNumber@buf(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _main->_printNumber
    _printNumber->___lwdiv
    _LCD_TextOut->_LCD_Write
    _LCD_Init->_LCD_Write
    _LCD_Init->_LCD_Write_Nibble
    _LCD_ConstTextOut->_LCD_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1491
                           _LCD_Busy
                   _LCD_ConstTextOut
                           _LCD_Init
                        _LCD_TextOut
                          _LCD_Write
                        _printNumber
 ---------------------------------------------------------------------------------
 (1) _printNumber                                         25    23      2    1098
                                              7 COMRAM    25    23      2
                        _LCD_TextOut
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _LCD_TextOut                                          2     0      2     212
                                              1 COMRAM     2     0      2
                           _LCD_Busy
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0      30
                                              1 COMRAM     1     1      0
                           _LCD_Busy
                          _LCD_Write
                   _LCD_Write_Nibble
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Nibble                                     1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_ConstTextOut                                     2     0      2     136
                                              1 COMRAM     2     0      2
                           _LCD_Busy
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Busy                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Busy
   _LCD_ConstTextOut
     _LCD_Busy
     _LCD_Write
   _LCD_Init
     _LCD_Busy
     _LCD_Write
     _LCD_Write_Nibble
   _LCD_TextOut
     _LCD_Busy
     _LCD_Write
   _LCD_Write
   _printNumber
     _LCD_TextOut
       _LCD_Busy
       _LCD_Write
     ___lwdiv
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      2D       1       47.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2D      20        0.0%
DATA                 0      0      2D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 23 18:15:20 2018

                       l50 08A2                         l44 087E                         l53 08B4  
                       l38 0862                         l47 0890                         l64 0C02  
                       l73 0BCE                         l65 0BE4                         l82 0A6C  
                       l74 0BAE                         l84 0A9C                         l94 0990  
                       u10 0A60                         u25 0A80                         u27 0A82  
                       u45 09FE                         u55 0A08                         u47 0A00  
                       u65 0A12                         u57 0A0A                         u75 0A1C  
                       u67 0A14                         u85 0A2C                         u77 0A1E  
                       u95 0A36                         u87 0A2E                         u97 0A38  
              __CFG_BOR$ON 000000                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
                      l102 08E6                        l111 0934                        l113 0946  
                      l105 0904                        l114 0952                        l108 0922  
                      l530 0AF0                        l540 0B32                        l525 0AC6  
                      l526 0ABE                        l535 0B10                        l536 0B08  
                      l529 0AE6                        l539 0B28               __CFG_CPB$OFF 000000  
                      u105 0A40                        u115 0A4A                        u107 0A42  
                      u117 0A4C                        u125 0B4E                        u135 0B58  
                      u127 0B50                        u240 086C                        u145 0B62  
                      u137 0B5A                        u155 0B6C                        u147 0B64  
                      u157 0B6E                        u430 0ACA               __CFG_CPD$OFF 000000  
                      u460 0B14                        u607 0848                        u560 0958  
                      u617 0856                        u627 08C8                        u587 082A  
                      u597 083A               ?_LCD_TextOut 0002                        wreg 000FE8  
             __CFG_LVP$OFF 000000               printNumber@c 001E               printNumber@n 0008  
             __CFG_WDT$OFF 000000          ?_LCD_Write_Nibble 0001                       STR_1 0801  
       ??_LCD_Write_Nibble 0001                       _main 08D0                       fsr2h 000FDA  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     start 0000         __size_of_LCD_Write 0066              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000           __end_of_LCD_Busy 0AA8  
         __end_of_LCD_Init 08D0              __CFG_PLLDIV$1 000000             __CFG_CCP2MX$ON 000000  
                    ?_main 0001            __end_of___lwdiv 0AFA            __end_of___lwmod 0B3C  
                    _PORTC 000F82              __CFG_USBDIV$1 000000                      _TRISC 000F94  
                    _TRISD 000F95              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000             __CFG_EBTRB$OFF 000000  
                    tablat 000FF5                      status 000FD8   __end_of_LCD_ConstTextOut 0BE2  
           __CFG_ICPRT$OFF 000000            __initialization 0B76               __end_of_main 097C  
                   ??_main 0021              __activetblptr 000001          __end_of_LCD_Write 0A54  
           printNumber@buf 000A             printNumber@str 001F                     _ADCON1 000FC1  
           __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000                  ??___lwdiv 0005  
                ??___lwmod 0005               __pdataCOMRAM 0021               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
     __size_of_LCD_TextOut 0030               ?_printNumber 0008                 __accesstop 0060  
  __end_of__initialization 0B9E                  ?_LCD_Busy 0001                  ?_LCD_Init 0001  
          __CFG_PBADEN$OFF 000000              ___rparam_used 000001             __pcstackCOMRAM 0001  
               ??_LCD_Busy 0001                 ??_LCD_Init 0002                 __pnvCOMRAM 002C  
__size_of_LCD_Write_Nibble 003A            __CFG_VREGEN$OFF 000000          ?_LCD_ConstTextOut 0002  
                  __Hparam 0000                    __Lparam 0000         ??_LCD_ConstTextOut 0004  
                  ___lwdiv 0AA8                    ___lwmod 0AFA               __psmallconst 0800  
          LCD_TextOut@text 0002                    __pcinit 0B76                    __ramtop 0800  
                  __ptext0 08D0                    __ptext1 097C                    __ptext2 0AFA  
                  __ptext3 0AA8                    __ptext4 0BE2                    __ptext5 080C  
                  __ptext6 0B3C                    __ptext7 0BAC                    __ptext8 09EE  
                  __ptext9 0A54                    _btnText 0021                  _LCD_Write 09EE  
     end_of_initialization 0B9E       __size_of_printNumber 0072                    postdec1 000FE5  
                  postinc0 000FEE                  _PORTBbits 000F81                  _PORTDbits 000F83  
                _TRISBbits 000F93                  _TRISEbits 000F96                 ?_LCD_Write 0001  
        __size_of_LCD_Busy 0054          __size_of_LCD_Init 00C4           _LCD_Write_Nibble 0B3C  
            __pidataCOMRAM 0C12              ??_LCD_TextOut 0004        start_initialization 0B76  
             _LCD_busy_cnt 002C           __CFG_LPT1OSC$OFF 000000                __pbssCOMRAM 0028  
              ??_LCD_Write 0001        __end_of_LCD_TextOut 0C12      LCD_Write_Nibble@value 0001  
         ___lwdiv@dividend 0001                  _cntButton 0028                   ?___lwdiv 0001  
                 ?___lwmod 0001  __size_of_LCD_ConstTextOut 0036                __smallconst 0800  
         ___lwdiv@quotient 0005                   _LCD_Busy 0A54                   _LCD_Init 080C  
                 _LATDbits 000F8C                   _LCD_data 002B                   _LATEbits 000F8D  
         __CFG_WDTPS$32768 000000                _displayTODO 002A                _LCD_TextOut 0BE2  
 __end_of_LCD_Write_Nibble 0B76              ??_printNumber 000A                  copy_data0 0B8A  
                 __Hrparam 0000                   __Lrparam 0000               __Lsmallconst 0800  
           LCD_Write@value 0001           __size_of___lwdiv 0052           __size_of___lwmod 0042  
    __CFG_FOSC$INTOSCIO_EC 000000            ___lwdiv@divisor 0003            ___lwdiv@counter 0007  
            __size_of_main 00AC        __end_of_printNumber 09EE      __CFG_CPUDIV$OSC1_PLL2 000000  
         _LCD_ConstTextOut 0BAC           ___lwmod@dividend 0001            ___lwmod@divisor 0003  
     LCD_ConstTextOut@text 0002            ___lwmod@counter 0005                _printNumber 097C  
