

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 23 21:38:51 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4550 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	idataCOMRAM
    61  000C16                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _btnText
    65  000C16  42                 	db	66
    66  000C17  74                 	db	116
    67  000C18  6E                 	db	110
    68  000C19  20                 	db	32
    69  000C1A  3F                 	db	63
    70  000C1B  00                 	db	0
    71  000C1C  00                 	db	0
    72                           
    73                           	psect	nvCOMRAM
    74  000039                     __pnvCOMRAM:
    75                           	opt stack 0
    76  000039                     _LCD_busy_cnt:
    77                           	opt stack 0
    78  000039                     	ds	2
    79  0000                     _PORTBbits	set	3969
    80  0000                     _TRISBbits	set	3987
    81  0000                     _PORTC	set	3970
    82  0000                     _TRISC	set	3988
    83  0000                     _ADCON1	set	4033
    84  0000                     _PORTDbits	set	3971
    85  0000                     _TRISD	set	3989
    86  0000                     _TRISDbits	set	3989
    87  0000                     _LATDbits	set	3980
    88  0000                     _TRISAbits	set	3986
    89  0000                     _LATAbits	set	3977
    90                           
    91                           	psect	smallconst
    92  000800                     __psmallconst:
    93                           	opt stack 0
    94  000800  00                 	db	0
    95  000801                     STR_1:
    96  000801  32                 	db	50	;'2'
    97  000802  33                 	db	51	;'3'
    98  000803  2E                 	db	46
    99  000804  30                 	db	48	;'0'
   100  000805  34                 	db	52	;'4'
   101  000806  2E                 	db	46
   102  000807  31                 	db	49	;'1'
   103  000808  38                 	db	56	;'8'
   104  000809  00                 	db	0
   105                           
   106                           ; #config settings
   107  00080A  00                 	db	0	; dummy byte at the end
   108  0000                     
   109                           	psect	cinit
   110  000B7A                     __pcinit:
   111                           	opt stack 0
   112  000B7A                     start_initialization:
   113                           	opt stack 0
   114  000B7A                     __initialization:
   115                           	opt stack 0
   116                           
   117                           ; Initialize objects allocated to COMRAM (7 bytes)
   118                           ; load TBLPTR registers with __pidataCOMRAM
   119  000B7A  0E16               	movlw	low __pidataCOMRAM
   120  000B7C  6EF6               	movwf	tblptrl,c
   121  000B7E  0E0C               	movlw	high __pidataCOMRAM
   122  000B80  6EF7               	movwf	tblptrh,c
   123  000B82  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   124  000B84  6EF8               	movwf	tblptru,c
   125  000B86  EE00  F02E         	lfsr	0,__pdataCOMRAM
   126  000B8A  EE10 F007          	lfsr	1,7
   127  000B8E                     copy_data0:
   128  000B8E  0009               	tblrd		*+
   129  000B90  CFF5 FFEE          	movff	tablat,postinc0
   130  000B94  50E5               	movf	postdec1,w,c
   131  000B96  50E1               	movf	fsr1l,w,c
   132  000B98  E1FA               	bnz	copy_data0
   133                           
   134                           ; Clear objects allocated to COMRAM (4 bytes)
   135  000B9A  6A38               	clrf	(__pbssCOMRAM+3)& (0+255),c
   136  000B9C  6A37               	clrf	(__pbssCOMRAM+2)& (0+255),c
   137  000B9E  6A36               	clrf	(__pbssCOMRAM+1)& (0+255),c
   138  000BA0  6A35               	clrf	__pbssCOMRAM& (0+255),c
   139  000BA2                     end_of_initialization:
   140                           	opt stack 0
   141  000BA2                     __end_of__initialization:
   142                           	opt stack 0
   143  000BA2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   144  000BA4  6EF8               	movwf	tblptru,c
   145  000BA6  0E08               	movlw	high __Lsmallconst
   146  000BA8  6EF7               	movwf	tblptrh,c
   147  000BAA  0100               	movlb	0
   148  000BAC  EF68  F004         	goto	_main	;jump to C main() function
   149                           tblptru	equ	0xFF8
   150                           tblptrh	equ	0xFF7
   151                           tblptrl	equ	0xFF6
   152                           tablat	equ	0xFF5
   153                           postinc0	equ	0xFEE
   154                           postdec1	equ	0xFE5
   155                           fsr1l	equ	0xFE1
   156                           
   157                           	psect	bssCOMRAM
   158  000035                     __pbssCOMRAM:
   159                           	opt stack 0
   160  000035                     _cntButton:
   161                           	opt stack 0
   162  000035                     	ds	2
   163  000037                     _displayTODO:
   164                           	opt stack 0
   165  000037                     	ds	1
   166  000038                     _LCD_data:
   167                           	opt stack 0
   168  000038                     	ds	1
   169                           tblptru	equ	0xFF8
   170                           tblptrh	equ	0xFF7
   171                           tblptrl	equ	0xFF6
   172                           tablat	equ	0xFF5
   173                           postinc0	equ	0xFEE
   174                           postdec1	equ	0xFE5
   175                           fsr1l	equ	0xFE1
   176                           
   177                           	psect	dataCOMRAM
   178  00002E                     __pdataCOMRAM:
   179                           	opt stack 0
   180  00002E                     _btnText:
   181                           	opt stack 0
   182  00002E                     	ds	7
   183                           tblptru	equ	0xFF8
   184                           tblptrh	equ	0xFF7
   185                           tblptrl	equ	0xFF6
   186                           tablat	equ	0xFF5
   187                           postinc0	equ	0xFEE
   188                           postdec1	equ	0xFE5
   189                           fsr1l	equ	0xFE1
   190                           
   191                           	psect	cstackCOMRAM
   192  000001                     __pcstackCOMRAM:
   193                           	opt stack 0
   194  000001                     ?___lwdiv:
   195                           	opt stack 0
   196  000001                     ?___lwmod:
   197                           	opt stack 0
   198  000001                     LCD_Write_Nibble@value:
   199                           	opt stack 0
   200  000001                     LCD_Write@value:
   201                           	opt stack 0
   202  000001                     ___lwdiv@dividend:
   203                           	opt stack 0
   204  000001                     ___lwmod@dividend:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0x0
   208  000001                     	ds	1
   209  000002                     ??_LCD_Init:
   210  000002                     LCD_TextOut@text:
   211                           	opt stack 0
   212  000002                     LCD_ConstTextOut@text:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0x1
   216  000002                     	ds	1
   217  000003                     ___lwdiv@divisor:
   218                           	opt stack 0
   219  000003                     ___lwmod@divisor:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x2
   223  000003                     	ds	1
   224  000004                     
   225                           ; 1 bytes @ 0x3
   226  000004                     	ds	1
   227  000005                     ___lwmod@counter:
   228                           	opt stack 0
   229  000005                     ___lwdiv@quotient:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x4
   233  000005                     	ds	2
   234  000007                     ___lwdiv@counter:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0x6
   238  000007                     	ds	1
   239  000008                     printNumber@n:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x7
   243  000008                     	ds	2
   244  00000A                     printNumber@buf:
   245                           	opt stack 0
   246                           
   247                           ; 33 bytes @ 0x9
   248  00000A                     	ds	33
   249  00002B                     printNumber@c:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x2A
   253  00002B                     	ds	1
   254  00002C                     printNumber@str:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x2B
   258  00002C                     	ds	2
   259  00002E                     tblptru	equ	0xFF8
   260                           tblptrh	equ	0xFF7
   261                           tblptrl	equ	0xFF6
   262                           tablat	equ	0xFF5
   263                           postinc0	equ	0xFEE
   264                           postdec1	equ	0xFE5
   265                           fsr1l	equ	0xFE1
   266                           
   267                           ; 1 bytes @ 0x2D
   268 ;;
   269 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   270 ;;
   271 ;; *************** function _main *****************
   272 ;; Defined at:
   273 ;;		line 60 in file "main.c"
   274 ;; Parameters:    Size  Location     Type
   275 ;;		None
   276 ;; Auto vars:     Size  Location     Type
   277 ;;		None
   278 ;; Return value:  Size  Location     Type
   279 ;;                  1    wreg      void 
   280 ;; Registers used:
   281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   282 ;; Tracked objects:
   283 ;;		On entry : 0/0
   284 ;;		On exit  : 0/0
   285 ;;		Unchanged: 0/0
   286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   287 ;;      Params:         0       0       0       0       0       0       0       0       0
   288 ;;      Locals:         0       0       0       0       0       0       0       0       0
   289 ;;      Temps:          0       0       0       0       0       0       0       0       0
   290 ;;      Totals:         0       0       0       0       0       0       0       0       0
   291 ;;Total ram usage:        0 bytes
   292 ;; Hardware stack levels required when called:    3
   293 ;; This function calls:
   294 ;;		_LCD_Busy
   295 ;;		_LCD_ConstTextOut
   296 ;;		_LCD_Init
   297 ;;		_LCD_TextOut
   298 ;;		_LCD_Write
   299 ;;		_printNumber
   300 ;; This function is called by:
   301 ;;		Startup code after reset
   302 ;; This function uses a non-reentrant model
   303 ;;
   304                           
   305                           	psect	text0
   306  0008D0                     __ptext0:
   307                           	opt stack 0
   308  0008D0                     _main:
   309                           	opt stack 28
   310                           
   311                           ;main.c: 62: ADCON1 = 0x0F;
   312                           
   313                           ;incstack = 0
   314  0008D0  0E0F               	movlw	15
   315  0008D2  6EC1               	movwf	4033,c	;volatile
   316                           
   317                           ;main.c: 63: TRISC = 0x00;
   318  0008D4  0E00               	movlw	0
   319  0008D6  6E94               	movwf	3988,c	;volatile
   320                           
   321                           ;main.c: 64: PORTC = 0x00;
   322  0008D8  0E00               	movlw	0
   323  0008DA  6E82               	movwf	3970,c	;volatile
   324                           
   325                           ;main.c: 66: displayTODO = 0;
   326  0008DC  0E00               	movlw	0
   327  0008DE  6E37               	movwf	_displayTODO,c
   328                           
   329                           ;main.c: 68: LCD_Init();
   330  0008E0  EC06  F004         	call	_LCD_Init	;wreg free
   331                           
   332                           ;main.c: 70: TRISBbits.TRISB0 = 1;
   333  0008E4  8093               	bsf	3987,0,c	;volatile
   334  0008E6  EC2C  F005         	call	_LCD_Busy	;wreg free
   335  0008EA  0900               	iorlw	0
   336  0008EC  A4D8               	btfss	status,2,c
   337  0008EE  D7FB               	goto	l104
   338  0008F0  948C               	bcf	3980,2,c	;volatile
   339  0008F2  0E80               	movlw	128
   340  0008F4  ECF9  F004         	call	_LCD_Write
   341  0008F8  0E01               	movlw	low STR_1
   342  0008FA  6E02               	movwf	LCD_ConstTextOut@text,c
   343  0008FC  0E08               	movlw	high STR_1
   344  0008FE  6E03               	movwf	LCD_ConstTextOut@text+1,c
   345  000900  ECD8  F005         	call	_LCD_ConstTextOut	;wreg free
   346  000904  EC2C  F005         	call	_LCD_Busy	;wreg free
   347  000908  0900               	iorlw	0
   348  00090A  A4D8               	btfss	status,2,c
   349  00090C  D7FB               	goto	l107
   350  00090E  948C               	bcf	3980,2,c	;volatile
   351  000910  0EC0               	movlw	192
   352  000912  ECF9  F004         	call	_LCD_Write
   353  000916  0E2E               	movlw	low _btnText
   354  000918  6E02               	movwf	LCD_TextOut@text,c
   355  00091A  0E00               	movlw	high _btnText
   356  00091C  6E03               	movwf	LCD_TextOut@text+1,c
   357  00091E  ECF3  F005         	call	_LCD_TextOut	;wreg free
   358  000922  EC2C  F005         	call	_LCD_Busy	;wreg free
   359  000926  0900               	iorlw	0
   360  000928  A4D8               	btfss	status,2,c
   361  00092A  D7FB               	goto	l110
   362  00092C  948C               	bcf	3980,2,c	;volatile
   363  00092E  0E0C               	movlw	12
   364  000930  ECF9  F004         	call	_LCD_Write
   365  000934  EC2C  F005         	call	_LCD_Busy	;wreg free
   366  000938  0900               	iorlw	0
   367  00093A  A4D8               	btfss	status,2,c
   368  00093C  D7FB               	goto	l113
   369  00093E  948C               	bcf	3980,2,c	;volatile
   370  000940  0EC3               	movlw	195
   371  000942  ECF9  F004         	call	_LCD_Write
   372  000946                     
   373                           ;main.c: 80: if (PORTBbits.RB0 == 0) {
   374  000946  B081               	btfsc	3969,0,c	;volatile
   375  000948  D006               	goto	l116
   376  00094A                     u560:
   377                           
   378                           ;main.c: 81: while (PORTBbits.RB0 == 0);
   379  00094A  A081               	btfss	3969,0,c	;volatile
   380  00094C  D7FE               	goto	u560
   381                           
   382                           ;main.c: 82: cntButton++;
   383  00094E  4A35               	infsnz	_cntButton,f,c
   384  000950  2A36               	incf	_cntButton+1,f,c
   385                           
   386                           ;main.c: 83: displayTODO = 1;
   387  000952  0E01               	movlw	1
   388  000954  6E37               	movwf	_displayTODO,c
   389  000956                     l116:
   390                           
   391                           ;main.c: 84: }
   392                           ;main.c: 86: if (displayTODO) {
   393  000956  5037               	movf	_displayTODO,w,c
   394  000958  B4D8               	btfsc	status,2,c
   395  00095A  D7F5               	goto	l115
   396  00095C                     u580:
   397                           
   398                           ;main.c: 87: while(LCD_Busy()){;} LATDbits.LATD2 = 0; LCD_Write(0x80 + (0x40 * 1) + 4);
   399  00095C  EC2C  F005         	call	_LCD_Busy	;wreg free
   400  000960  0900               	iorlw	0
   401  000962  A4D8               	btfss	status,2,c
   402  000964  D7FB               	goto	u580
   403  000966  948C               	bcf	3980,2,c	;volatile
   404  000968  0EC4               	movlw	196
   405  00096A  ECF9  F004         	call	_LCD_Write
   406                           
   407                           ;main.c: 88: printNumber(cntButton);
   408  00096E  C035  F008         	movff	_cntButton,printNumber@n
   409  000972  C036  F009         	movff	_cntButton+1,printNumber@n+1
   410  000976  ECC0  F004         	call	_printNumber	;wreg free
   411                           
   412                           ;main.c: 89: displayTODO = 0;
   413  00097A  0E00               	movlw	0
   414  00097C  6E37               	movwf	_displayTODO,c
   415  00097E  D7E3               	goto	l115
   416  000980                     __end_of_main:
   417                           	opt stack 0
   418                           tblptru	equ	0xFF8
   419                           tblptrh	equ	0xFF7
   420                           tblptrl	equ	0xFF6
   421                           tablat	equ	0xFF5
   422                           postinc0	equ	0xFEE
   423                           postdec1	equ	0xFE5
   424                           fsr1l	equ	0xFE1
   425                           status	equ	0xFD8
   426                           
   427 ;; *************** function _printNumber *****************
   428 ;; Defined at:
   429 ;;		line 43 in file "main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;  n               2    7[COMRAM] unsigned int 
   432 ;; Auto vars:     Size  Location     Type
   433 ;;  c               1   42[COMRAM] unsigned char 
   434 ;;  buf            33    9[COMRAM] unsigned char [33]
   435 ;;  str             2   43[COMRAM] PTR unsigned char 
   436 ;;		 -> printNumber@buf(33), 
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   446 ;;      Params:         2       0       0       0       0       0       0       0       0
   447 ;;      Locals:        36       0       0       0       0       0       0       0       0
   448 ;;      Temps:          0       0       0       0       0       0       0       0       0
   449 ;;      Totals:        38       0       0       0       0       0       0       0       0
   450 ;;Total ram usage:       38 bytes
   451 ;; Hardware stack levels used:    1
   452 ;; Hardware stack levels required when called:    2
   453 ;; This function calls:
   454 ;;		_LCD_TextOut
   455 ;;		___lwdiv
   456 ;;		___lwmod
   457 ;; This function is called by:
   458 ;;		_main
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           	psect	text1
   463  000980                     __ptext1:
   464                           	opt stack 0
   465  000980                     _printNumber:
   466                           	opt stack 28
   467                           
   468                           ;main.c: 45: char buf[8 * sizeof (long) + 1];
   469                           ;main.c: 46: char *str = &buf[sizeof (buf) - 1];
   470                           
   471                           ;incstack = 0
   472  000980  0E2A               	movlw	low (printNumber@buf+32)
   473  000982  6E2C               	movwf	printNumber@str,c
   474  000984  0E00               	movlw	high (printNumber@buf+32)
   475  000986  6E2D               	movwf	printNumber@str+1,c
   476                           
   477                           ;main.c: 48: *str = '\0';
   478  000988  C02C  FFD9         	movff	printNumber@str,fsr2l
   479  00098C  C02D  FFDA         	movff	printNumber@str+1,fsr2h
   480  000990  0E00               	movlw	0
   481  000992  6EDF               	movwf	indf2,c
   482  000994                     
   483                           ;main.c: 51: char c = n % 10;
   484  000994  C008  F001         	movff	printNumber@n,___lwmod@dividend
   485  000998  C009  F002         	movff	printNumber@n+1,___lwmod@dividend+1
   486  00099C  0E00               	movlw	0
   487  00099E  6E04               	movwf	___lwmod@divisor+1,c
   488  0009A0  0E0A               	movlw	10
   489  0009A2  6E03               	movwf	___lwmod@divisor,c
   490  0009A4  EC7F  F005         	call	___lwmod	;wreg free
   491  0009A8  5001               	movf	?___lwmod,w,c
   492  0009AA  6E2B               	movwf	printNumber@c,c
   493                           
   494                           ;main.c: 52: n /= 10;
   495  0009AC  C008  F001         	movff	printNumber@n,___lwdiv@dividend
   496  0009B0  C009  F002         	movff	printNumber@n+1,___lwdiv@dividend+1
   497  0009B4  0E00               	movlw	0
   498  0009B6  6E04               	movwf	___lwdiv@divisor+1,c
   499  0009B8  0E0A               	movlw	10
   500  0009BA  6E03               	movwf	___lwdiv@divisor,c
   501  0009BC  EC56  F005         	call	___lwdiv	;wreg free
   502  0009C0  C001  F008         	movff	?___lwdiv,printNumber@n
   503  0009C4  C002  F009         	movff	?___lwdiv+1,printNumber@n+1
   504                           
   505                           ;main.c: 54: *--str = c + '0';
   506  0009C8  502B               	movf	printNumber@c,w,c
   507  0009CA  0F30               	addlw	48
   508  0009CC  062C               	decf	printNumber@str,f,c
   509  0009CE  A0D8               	btfss	status,0,c
   510  0009D0  062D               	decf	printNumber@str+1,f,c
   511  0009D2  C02C  FFD9         	movff	printNumber@str,fsr2l
   512  0009D6  C02D  FFDA         	movff	printNumber@str+1,fsr2h
   513  0009DA  6EDF               	movwf	indf2,c
   514                           
   515                           ;main.c: 55: } while (n);
   516  0009DC  5008               	movf	printNumber@n,w,c
   517  0009DE  1009               	iorwf	printNumber@n+1,w,c
   518  0009E0  A4D8               	btfss	status,2,c
   519  0009E2  D7D8               	goto	l96
   520                           
   521                           ;main.c: 57: LCD_TextOut(str);
   522  0009E4  C02C  F002         	movff	printNumber@str,LCD_TextOut@text
   523  0009E8  C02D  F003         	movff	printNumber@str+1,LCD_TextOut@text+1
   524  0009EC  ECF3  F005         	call	_LCD_TextOut	;wreg free
   525  0009F0  0012               	return		;funcret
   526  0009F2                     __end_of_printNumber:
   527                           	opt stack 0
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           indf2	equ	0xFDF
   536                           fsr2h	equ	0xFDA
   537                           fsr2l	equ	0xFD9
   538                           status	equ	0xFD8
   539                           
   540 ;; *************** function ___lwmod *****************
   541 ;; Defined at:
   542 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;  dividend        2    0[COMRAM] unsigned int 
   545 ;;  divisor         2    2[COMRAM] unsigned int 
   546 ;; Auto vars:     Size  Location     Type
   547 ;;  counter         1    4[COMRAM] unsigned char 
   548 ;; Return value:  Size  Location     Type
   549 ;;                  2    0[COMRAM] unsigned int 
   550 ;; Registers used:
   551 ;;		wreg, status,2, status,0
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   557 ;;      Params:         4       0       0       0       0       0       0       0       0
   558 ;;      Locals:         1       0       0       0       0       0       0       0       0
   559 ;;      Temps:          0       0       0       0       0       0       0       0       0
   560 ;;      Totals:         5       0       0       0       0       0       0       0       0
   561 ;;Total ram usage:        5 bytes
   562 ;; Hardware stack levels used:    1
   563 ;; This function calls:
   564 ;;		Nothing
   565 ;; This function is called by:
   566 ;;		_printNumber
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570                           	psect	text2
   571  000AFE                     __ptext2:
   572                           	opt stack 0
   573  000AFE                     ___lwmod:
   574                           	opt stack 29
   575                           
   576                           ;incstack = 0
   577  000AFE  5003               	movf	___lwmod@divisor,w,c
   578  000B00  1004               	iorwf	___lwmod@divisor+1,w,c
   579  000B02  B4D8               	btfsc	status,2,c
   580  000B04  D018               	goto	l545
   581  000B06  0E01               	movlw	1
   582  000B08  6E05               	movwf	___lwmod@counter,c
   583  000B0A  D004               	goto	l540
   584  000B0C  90D8               	bcf	status,0,c
   585  000B0E  3603               	rlcf	___lwmod@divisor,f,c
   586  000B10  3604               	rlcf	___lwmod@divisor+1,f,c
   587  000B12  2A05               	incf	___lwmod@counter,f,c
   588  000B14                     l540:
   589  000B14  AE04               	btfss	___lwmod@divisor+1,7,c
   590  000B16  D7FA               	goto	l541
   591  000B18                     u470:
   592  000B18  5003               	movf	___lwmod@divisor,w,c
   593  000B1A  5C01               	subwf	___lwmod@dividend,w,c
   594  000B1C  5004               	movf	___lwmod@divisor+1,w,c
   595  000B1E  5802               	subwfb	___lwmod@dividend+1,w,c
   596  000B20  A0D8               	btfss	status,0,c
   597  000B22  D004               	goto	l544
   598  000B24  5003               	movf	___lwmod@divisor,w,c
   599  000B26  5E01               	subwf	___lwmod@dividend,f,c
   600  000B28  5004               	movf	___lwmod@divisor+1,w,c
   601  000B2A  5A02               	subwfb	___lwmod@dividend+1,f,c
   602  000B2C                     l544:
   603  000B2C  90D8               	bcf	status,0,c
   604  000B2E  3204               	rrcf	___lwmod@divisor+1,f,c
   605  000B30  3203               	rrcf	___lwmod@divisor,f,c
   606  000B32  2E05               	decfsz	___lwmod@counter,f,c
   607  000B34  D7F1               	goto	u470
   608  000B36                     l545:
   609  000B36  C001  F001         	movff	___lwmod@dividend,?___lwmod
   610  000B3A  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   611  000B3E  0012               	return		;funcret
   612  000B40                     __end_of___lwmod:
   613                           	opt stack 0
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           postdec1	equ	0xFE5
   620                           fsr1l	equ	0xFE1
   621                           indf2	equ	0xFDF
   622                           fsr2h	equ	0xFDA
   623                           fsr2l	equ	0xFD9
   624                           status	equ	0xFD8
   625                           
   626 ;; *************** function ___lwdiv *****************
   627 ;; Defined at:
   628 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  dividend        2    0[COMRAM] unsigned int 
   631 ;;  divisor         2    2[COMRAM] unsigned int 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  quotient        2    4[COMRAM] unsigned int 
   634 ;;  counter         1    6[COMRAM] unsigned char 
   635 ;; Return value:  Size  Location     Type
   636 ;;                  2    0[COMRAM] unsigned int 
   637 ;; Registers used:
   638 ;;		wreg, status,2, status,0
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   644 ;;      Params:         4       0       0       0       0       0       0       0       0
   645 ;;      Locals:         3       0       0       0       0       0       0       0       0
   646 ;;      Temps:          0       0       0       0       0       0       0       0       0
   647 ;;      Totals:         7       0       0       0       0       0       0       0       0
   648 ;;Total ram usage:        7 bytes
   649 ;; Hardware stack levels used:    1
   650 ;; This function calls:
   651 ;;		Nothing
   652 ;; This function is called by:
   653 ;;		_printNumber
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text3
   658  000AAC                     __ptext3:
   659                           	opt stack 0
   660  000AAC                     ___lwdiv:
   661                           	opt stack 29
   662                           
   663                           ;incstack = 0
   664  000AAC  0E00               	movlw	0
   665  000AAE  6E06               	movwf	___lwdiv@quotient+1,c
   666  000AB0  0E00               	movlw	0
   667  000AB2  6E05               	movwf	___lwdiv@quotient,c
   668  000AB4  5003               	movf	___lwdiv@divisor,w,c
   669  000AB6  1004               	iorwf	___lwdiv@divisor+1,w,c
   670  000AB8  B4D8               	btfsc	status,2,c
   671  000ABA  D01C               	goto	l535
   672  000ABC  0E01               	movlw	1
   673  000ABE  6E07               	movwf	___lwdiv@counter,c
   674  000AC0  D004               	goto	l530
   675  000AC2  90D8               	bcf	status,0,c
   676  000AC4  3603               	rlcf	___lwdiv@divisor,f,c
   677  000AC6  3604               	rlcf	___lwdiv@divisor+1,f,c
   678  000AC8  2A07               	incf	___lwdiv@counter,f,c
   679  000ACA                     l530:
   680  000ACA  AE04               	btfss	___lwdiv@divisor+1,7,c
   681  000ACC  D7FA               	goto	l531
   682  000ACE                     u440:
   683  000ACE  90D8               	bcf	status,0,c
   684  000AD0  3605               	rlcf	___lwdiv@quotient,f,c
   685  000AD2  3606               	rlcf	___lwdiv@quotient+1,f,c
   686  000AD4  5003               	movf	___lwdiv@divisor,w,c
   687  000AD6  5C01               	subwf	___lwdiv@dividend,w,c
   688  000AD8  5004               	movf	___lwdiv@divisor+1,w,c
   689  000ADA  5802               	subwfb	___lwdiv@dividend+1,w,c
   690  000ADC  A0D8               	btfss	status,0,c
   691  000ADE  D005               	goto	l534
   692  000AE0  5003               	movf	___lwdiv@divisor,w,c
   693  000AE2  5E01               	subwf	___lwdiv@dividend,f,c
   694  000AE4  5004               	movf	___lwdiv@divisor+1,w,c
   695  000AE6  5A02               	subwfb	___lwdiv@dividend+1,f,c
   696  000AE8  8005               	bsf	___lwdiv@quotient,0,c
   697  000AEA                     l534:
   698  000AEA  90D8               	bcf	status,0,c
   699  000AEC  3204               	rrcf	___lwdiv@divisor+1,f,c
   700  000AEE  3203               	rrcf	___lwdiv@divisor,f,c
   701  000AF0  2E07               	decfsz	___lwdiv@counter,f,c
   702  000AF2  D7ED               	goto	u440
   703  000AF4                     l535:
   704  000AF4  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
   705  000AF8  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
   706  000AFC  0012               	return		;funcret
   707  000AFE                     __end_of___lwdiv:
   708                           	opt stack 0
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           postinc0	equ	0xFEE
   714                           postdec1	equ	0xFE5
   715                           fsr1l	equ	0xFE1
   716                           indf2	equ	0xFDF
   717                           fsr2h	equ	0xFDA
   718                           fsr2l	equ	0xFD9
   719                           status	equ	0xFD8
   720                           
   721 ;; *************** function _LCD_TextOut *****************
   722 ;; Defined at:
   723 ;;		line 301 in file "LCD_16x2.h"
   724 ;; Parameters:    Size  Location     Type
   725 ;;  text            2    1[COMRAM] PTR unsigned char 
   726 ;;		 -> btnText(7), printNumber@buf(33), 
   727 ;; Auto vars:     Size  Location     Type
   728 ;;		None
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   738 ;;      Params:         2       0       0       0       0       0       0       0       0
   739 ;;      Locals:         0       0       0       0       0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0       0       0       0       0
   741 ;;      Totals:         2       0       0       0       0       0       0       0       0
   742 ;;Total ram usage:        2 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:    1
   745 ;; This function calls:
   746 ;;		_LCD_Busy
   747 ;;		_LCD_Write
   748 ;; This function is called by:
   749 ;;		_printNumber
   750 ;;		_main
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           	psect	text4
   755  000BE6                     __ptext4:
   756                           	opt stack 0
   757  000BE6                     _LCD_TextOut:
   758                           	opt stack 28
   759                           
   760                           ;LCD_16x2.h: 302: while (*text) {
   761                           
   762                           ;incstack = 0
   763  000BE6  D00F               	goto	l66
   764  000BE8                     
   765                           ;LCD_16x2.h: 303: while(LCD_Busy()){;} LATDbits.LATD2 = 1; LCD_Write(*text);
   766  000BE8  EC2C  F005         	call	_LCD_Busy	;wreg free
   767  000BEC  0900               	iorlw	0
   768  000BEE  A4D8               	btfss	status,2,c
   769  000BF0  D7FB               	goto	l67
   770  000BF2  848C               	bsf	3980,2,c	;volatile
   771  000BF4  C002  FFD9         	movff	LCD_TextOut@text,fsr2l
   772  000BF8  C003  FFDA         	movff	LCD_TextOut@text+1,fsr2h
   773  000BFC  50DF               	movf	indf2,w,c
   774  000BFE  ECF9  F004         	call	_LCD_Write
   775                           
   776                           ;LCD_16x2.h: 304: text++;
   777  000C02  4A02               	infsnz	LCD_TextOut@text,f,c
   778  000C04  2A03               	incf	LCD_TextOut@text+1,f,c
   779  000C06                     l66:
   780  000C06  C002  FFD9         	movff	LCD_TextOut@text,fsr2l
   781  000C0A  C003  FFDA         	movff	LCD_TextOut@text+1,fsr2h
   782  000C0E  50DF               	movf	indf2,w,c
   783  000C10  B4D8               	btfsc	status,2,c
   784  000C12  0012               	return	
   785  000C14  D7E9               	goto	l67
   786  000C16                     __end_of_LCD_TextOut:
   787                           	opt stack 0
   788                           tblptru	equ	0xFF8
   789                           tblptrh	equ	0xFF7
   790                           tblptrl	equ	0xFF6
   791                           tablat	equ	0xFF5
   792                           postinc0	equ	0xFEE
   793                           postdec1	equ	0xFE5
   794                           fsr1l	equ	0xFE1
   795                           indf2	equ	0xFDF
   796                           fsr2h	equ	0xFDA
   797                           fsr2l	equ	0xFD9
   798                           status	equ	0xFD8
   799                           
   800 ;; *************** function _LCD_Init *****************
   801 ;; Defined at:
   802 ;;		line 213 in file "LCD_16x2.h"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, status,2, status,0, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   816 ;;      Params:         0       0       0       0       0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0       0       0
   818 ;;      Temps:          1       0       0       0       0       0       0       0       0
   819 ;;      Totals:         1       0       0       0       0       0       0       0       0
   820 ;;Total ram usage:        1 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    1
   823 ;; This function calls:
   824 ;;		_LCD_Busy
   825 ;;		_LCD_Write
   826 ;;		_LCD_Write_Nibble
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           	psect	text5
   833  00080C                     __ptext5:
   834                           	opt stack 0
   835  00080C                     _LCD_Init:
   836                           	opt stack 29
   837                           
   838                           ;LCD_16x2.h: 214: LATAbits.LATA0 = 0;
   839                           
   840                           ;incstack = 0
   841  00080C  9089               	bcf	3977,0,c	;volatile
   842                           
   843                           ;LCD_16x2.h: 215: TRISAbits.TRISA0 = 0;
   844  00080E  9092               	bcf	3986,0,c	;volatile
   845                           
   846                           ;LCD_16x2.h: 216: LATDbits.LATD2 = 0;
   847  000810  948C               	bcf	3980,2,c	;volatile
   848                           
   849                           ;LCD_16x2.h: 217: TRISDbits.TRISD2 = 0;
   850  000812  9495               	bcf	3989,2,c	;volatile
   851                           
   852                           ;LCD_16x2.h: 218: LATDbits.LATD3 = 0;
   853  000814  968C               	bcf	3980,3,c	;volatile
   854                           
   855                           ;LCD_16x2.h: 219: TRISDbits.TRISD3 = 0;
   856  000816  9695               	bcf	3989,3,c	;volatile
   857                           
   858                           ;LCD_16x2.h: 221: TRISD &= 0x0F;
   859  000818  0E0F               	movlw	15
   860  00081A  1695               	andwf	3989,f,c	;volatile
   861                           
   862                           ;LCD_16x2.h: 223: LCD_busy_cnt = 1;
   863  00081C  0E00               	movlw	0
   864  00081E  6E3A               	movwf	_LCD_busy_cnt+1,c
   865  000820  0E01               	movlw	1
   866  000822  6E39               	movwf	_LCD_busy_cnt,c
   867                           
   868                           ;LCD_16x2.h: 225: _delay((unsigned long)((15)*(1000000/4000.0)));
   869  000824  0E05               	movlw	5
   870  000826  6E02               	movwf	??_LCD_Init& (0+255),c
   871  000828  0EDE               	movlw	222
   872  00082A                     u607:
   873  00082A  2EE8               	decfsz	wreg,f,c
   874  00082C  D7FE               	bra	u607
   875  00082E  2E02               	decfsz	??_LCD_Init& (0+255),f,c
   876  000830  D7FC               	bra	u607
   877                           
   878                           ;LCD_16x2.h: 227: LCD_Write_Nibble(0x30);
   879  000832  0E30               	movlw	48
   880  000834  ECA0  F005         	call	_LCD_Write_Nibble
   881                           
   882                           ;LCD_16x2.h: 228: _delay((unsigned long)((5)*(1000000/4000.0)));
   883  000838  0EFA               	movlw	250
   884  00083A                     u617:
   885  00083A  D000               	nop2	
   886  00083C  2EE8               	decfsz	wreg,f,c
   887  00083E  D7FD               	bra	u617
   888                           
   889                           ;LCD_16x2.h: 229: LCD_Write_Nibble(0x30);
   890  000840  0E30               	movlw	48
   891  000842  ECA0  F005         	call	_LCD_Write_Nibble
   892                           
   893                           ;LCD_16x2.h: 230: _delay((unsigned long)((5)*(1000000/4000.0)));
   894  000846  0EFA               	movlw	250
   895  000848                     u627:
   896  000848  D000               	nop2	
   897  00084A  2EE8               	decfsz	wreg,f,c
   898  00084C  D7FD               	bra	u627
   899                           
   900                           ;LCD_16x2.h: 231: LCD_Write_Nibble(0x30);
   901  00084E  0E30               	movlw	48
   902  000850  ECA0  F005         	call	_LCD_Write_Nibble
   903                           
   904                           ;LCD_16x2.h: 232: _delay((unsigned long)((5)*(1000000/4000.0)));
   905  000854  0EFA               	movlw	250
   906  000856                     u637:
   907  000856  D000               	nop2	
   908  000858  2EE8               	decfsz	wreg,f,c
   909  00085A  D7FD               	bra	u637
   910                           
   911                           ;LCD_16x2.h: 241: LCD_Write_Nibble(0x20);
   912  00085C  0E20               	movlw	32
   913  00085E  ECA0  F005         	call	_LCD_Write_Nibble
   914  000862                     
   915                           ;LCD_16x2.h: 243: ;
   916  000862  EC2C  F005         	call	_LCD_Busy	;wreg free
   917  000866  0900               	iorlw	0
   918  000868  A4D8               	btfss	status,2,c
   919  00086A  D7FB               	goto	l40
   920  00086C                     u240:
   921                           
   922                           ;LCD_16x2.h: 244: }
   923                           ;LCD_16x2.h: 245: while(LCD_Busy()){;} LATDbits.LATD2 = 0; LCD_Write(0x28);
   924  00086C  EC2C  F005         	call	_LCD_Busy	;wreg free
   925  000870  0900               	iorlw	0
   926  000872  A4D8               	btfss	status,2,c
   927  000874  D7FB               	goto	u240
   928  000876  948C               	bcf	3980,2,c	;volatile
   929  000878  0E28               	movlw	40
   930  00087A  ECF9  F004         	call	_LCD_Write
   931  00087E  EC2C  F005         	call	_LCD_Busy	;wreg free
   932  000882  0900               	iorlw	0
   933  000884  A4D8               	btfss	status,2,c
   934  000886  D7FB               	goto	l46
   935  000888  948C               	bcf	3980,2,c	;volatile
   936  00088A  0E0C               	movlw	12
   937  00088C  ECF9  F004         	call	_LCD_Write
   938  000890  EC2C  F005         	call	_LCD_Busy	;wreg free
   939  000894  0900               	iorlw	0
   940  000896  A4D8               	btfss	status,2,c
   941  000898  D7FB               	goto	l49
   942  00089A  948C               	bcf	3980,2,c	;volatile
   943  00089C  0E06               	movlw	6
   944  00089E  ECF9  F004         	call	_LCD_Write
   945  0008A2  EC2C  F005         	call	_LCD_Busy	;wreg free
   946  0008A6  0900               	iorlw	0
   947  0008A8  A4D8               	btfss	status,2,c
   948  0008AA  D7FB               	goto	l52
   949  0008AC  948C               	bcf	3980,2,c	;volatile
   950  0008AE  0E01               	movlw	1
   951  0008B0  ECF9  F004         	call	_LCD_Write
   952  0008B4  EC2C  F005         	call	_LCD_Busy	;wreg free
   953  0008B8  0900               	iorlw	0
   954  0008BA  A4D8               	btfss	status,2,c
   955  0008BC  D7FB               	goto	l55
   956  0008BE  948C               	bcf	3980,2,c	;volatile
   957  0008C0  0E02               	movlw	2
   958  0008C2  ECF9  F004         	call	_LCD_Write
   959  0008C6  0EFA               	movlw	250
   960  0008C8                     u647:
   961  0008C8  D000               	nop2	
   962  0008CA  2EE8               	decfsz	wreg,f,c
   963  0008CC  D7FD               	bra	u647
   964  0008CE  0012               	return		;funcret
   965  0008D0                     __end_of_LCD_Init:
   966                           	opt stack 0
   967                           tblptru	equ	0xFF8
   968                           tblptrh	equ	0xFF7
   969                           tblptrl	equ	0xFF6
   970                           tablat	equ	0xFF5
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           postdec1	equ	0xFE5
   974                           fsr1l	equ	0xFE1
   975                           indf2	equ	0xFDF
   976                           fsr2h	equ	0xFDA
   977                           fsr2l	equ	0xFD9
   978                           status	equ	0xFD8
   979                           
   980 ;; *************** function _LCD_Write_Nibble *****************
   981 ;; Defined at:
   982 ;;		line 265 in file "LCD_16x2.h"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  value           1    wreg     unsigned char 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  value           1    0[COMRAM] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   996 ;;      Params:         0       0       0       0       0       0       0       0       0
   997 ;;      Locals:         1       0       0       0       0       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0       0       0       0       0
   999 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1000 ;;Total ram usage:        1 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_LCD_Init
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           	psect	text6
  1010  000B40                     __ptext6:
  1011                           	opt stack 0
  1012  000B40                     _LCD_Write_Nibble:
  1013                           	opt stack 29
  1014                           
  1015                           ;incstack = 0
  1016                           ;LCD_Write_Nibble@value stored from wreg
  1017  000B40  6E01               	movwf	LCD_Write_Nibble@value,c
  1018                           
  1019                           ;LCD_16x2.h: 266: LCD_data.all = value;
  1020  000B42  C001  F038         	movff	LCD_Write_Nibble@value,_LCD_data
  1021                           
  1022                           ;LCD_16x2.h: 267: LATDbits.LATD2 = 0;
  1023  000B46  948C               	bcf	3980,2,c	;volatile
  1024                           
  1025                           ;LCD_16x2.h: 268: LATAbits.LATA0 = 0;
  1026  000B48  9089               	bcf	3977,0,c	;volatile
  1027                           
  1028                           ;LCD_16x2.h: 270: LATDbits.LATD4 = LCD_data.bit4;
  1029  000B4A  A838               	btfss	_LCD_data,4,c
  1030  000B4C  D002               	bra	u125
  1031  000B4E  888C               	bsf	3980,4,c	;volatile
  1032  000B50  D001               	bra	u127
  1033  000B52                     u125:
  1034  000B52  988C               	bcf	3980,4,c	;volatile
  1035  000B54                     u127:
  1036                           
  1037                           ;LCD_16x2.h: 271: LATDbits.LATD5 = LCD_data.bit5;
  1038  000B54  AA38               	btfss	_LCD_data,5,c
  1039  000B56  D002               	bra	u135
  1040  000B58  8A8C               	bsf	3980,5,c	;volatile
  1041  000B5A  D001               	bra	u137
  1042  000B5C                     u135:
  1043  000B5C  9A8C               	bcf	3980,5,c	;volatile
  1044  000B5E                     u137:
  1045                           
  1046                           ;LCD_16x2.h: 272: LATDbits.LATD6 = LCD_data.bit6;
  1047  000B5E  AC38               	btfss	_LCD_data,6,c
  1048  000B60  D002               	bra	u145
  1049  000B62  8C8C               	bsf	3980,6,c	;volatile
  1050  000B64  D001               	bra	u147
  1051  000B66                     u145:
  1052  000B66  9C8C               	bcf	3980,6,c	;volatile
  1053  000B68                     u147:
  1054                           
  1055                           ;LCD_16x2.h: 273: LATDbits.LATD7 = LCD_data.bit7;
  1056  000B68  AE38               	btfss	_LCD_data,7,c
  1057  000B6A  D002               	bra	u155
  1058  000B6C  8E8C               	bsf	3980,7,c	;volatile
  1059  000B6E  D001               	bra	u157
  1060  000B70                     u155:
  1061  000B70  9E8C               	bcf	3980,7,c	;volatile
  1062  000B72                     u157:
  1063                           
  1064                           ;LCD_16x2.h: 274: LATDbits.LATD3 = 1; __nop(); LATDbits.LATD3 = 0;;
  1065  000B72  868C               	bsf	3980,3,c	;volatile
  1066  000B74  F000               	nop	
  1067  000B76  968C               	bcf	3980,3,c	;volatile
  1068  000B78  0012               	return		;funcret
  1069  000B7A                     __end_of_LCD_Write_Nibble:
  1070                           	opt stack 0
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           postdec1	equ	0xFE5
  1078                           fsr1l	equ	0xFE1
  1079                           indf2	equ	0xFDF
  1080                           fsr2h	equ	0xFDA
  1081                           fsr2l	equ	0xFD9
  1082                           status	equ	0xFD8
  1083                           
  1084 ;; *************** function _LCD_ConstTextOut *****************
  1085 ;; Defined at:
  1086 ;;		line 312 in file "LCD_16x2.h"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;  text            2    1[COMRAM] PTR const unsigned char 
  1089 ;;		 -> STR_1(9), 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1101 ;;      Params:         2       0       0       0       0       0       0       0       0
  1102 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1103 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1104 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1105 ;;Total ram usage:        2 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    1
  1108 ;; This function calls:
  1109 ;;		_LCD_Busy
  1110 ;;		_LCD_Write
  1111 ;; This function is called by:
  1112 ;;		_main
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text7
  1117  000BB0                     __ptext7:
  1118                           	opt stack 0
  1119  000BB0                     _LCD_ConstTextOut:
  1120                           	opt stack 29
  1121                           
  1122                           ;LCD_16x2.h: 313: while (*text) {
  1123                           
  1124                           ;incstack = 0
  1125  000BB0  D010               	goto	l75
  1126  000BB2                     
  1127                           ;LCD_16x2.h: 314: while(LCD_Busy()){;} LATDbits.LATD2 = 1; LCD_Write(*text);
  1128  000BB2  EC2C  F005         	call	_LCD_Busy	;wreg free
  1129  000BB6  0900               	iorlw	0
  1130  000BB8  A4D8               	btfss	status,2,c
  1131  000BBA  D7FB               	goto	l76
  1132  000BBC  848C               	bsf	3980,2,c	;volatile
  1133  000BBE  C002  FFF6         	movff	LCD_ConstTextOut@text,tblptrl
  1134  000BC2  C003  FFF7         	movff	LCD_ConstTextOut@text+1,tblptrh
  1135  000BC6                     	if	0	;tblptru may be non-zero
  1136  000BC6                     	endif
  1137  000BC6                     	if	0	;tblptru may be non-zero
  1138  000BC6                     	endif
  1139  000BC6  0008               	tblrd		*
  1140  000BC8  50F5               	movf	tablat,w,c
  1141  000BCA  ECF9  F004         	call	_LCD_Write
  1142                           
  1143                           ;LCD_16x2.h: 315: text++;
  1144  000BCE  4A02               	infsnz	LCD_ConstTextOut@text,f,c
  1145  000BD0  2A03               	incf	LCD_ConstTextOut@text+1,f,c
  1146  000BD2                     l75:
  1147  000BD2  C002  FFF6         	movff	LCD_ConstTextOut@text,tblptrl
  1148  000BD6  C003  FFF7         	movff	LCD_ConstTextOut@text+1,tblptrh
  1149  000BDA                     	if	0	;tblptru may be non-zero
  1150  000BDA                     	endif
  1151  000BDA                     	if	0	;tblptru may be non-zero
  1152  000BDA                     	endif
  1153  000BDA  0008               	tblrd		*
  1154  000BDC  50F5               	movf	tablat,w,c
  1155  000BDE  0900               	iorlw	0
  1156  000BE0  B4D8               	btfsc	status,2,c
  1157  000BE2  0012               	return	
  1158  000BE4  D7E6               	goto	l76
  1159  000BE6                     __end_of_LCD_ConstTextOut:
  1160                           	opt stack 0
  1161                           tblptru	equ	0xFF8
  1162                           tblptrh	equ	0xFF7
  1163                           tblptrl	equ	0xFF6
  1164                           tablat	equ	0xFF5
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           postdec1	equ	0xFE5
  1168                           fsr1l	equ	0xFE1
  1169                           indf2	equ	0xFDF
  1170                           fsr2h	equ	0xFDA
  1171                           fsr2l	equ	0xFD9
  1172                           status	equ	0xFD8
  1173                           
  1174 ;; *************** function _LCD_Write *****************
  1175 ;; Defined at:
  1176 ;;		line 279 in file "LCD_16x2.h"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;  value           1    wreg     unsigned char 
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;  value           1    0[COMRAM] unsigned char 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1190 ;;      Params:         0       0       0       0       0       0       0       0       0
  1191 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1192 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1193 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1194 ;;Total ram usage:        1 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; This function calls:
  1197 ;;		Nothing
  1198 ;; This function is called by:
  1199 ;;		_LCD_Init
  1200 ;;		_LCD_TextOut
  1201 ;;		_LCD_ConstTextOut
  1202 ;;		_main
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text8
  1207  0009F2                     __ptext8:
  1208                           	opt stack 0
  1209  0009F2                     _LCD_Write:
  1210                           	opt stack 28
  1211                           
  1212                           ;incstack = 0
  1213                           ;LCD_Write@value stored from wreg
  1214  0009F2  6E01               	movwf	LCD_Write@value,c
  1215                           
  1216                           ;LCD_16x2.h: 280: LCD_data.all = value;
  1217  0009F4  C001  F038         	movff	LCD_Write@value,_LCD_data
  1218                           
  1219                           ;LCD_16x2.h: 281: LATAbits.LATA0 = 0;
  1220  0009F8  9089               	bcf	3977,0,c	;volatile
  1221                           
  1222                           ;LCD_16x2.h: 283: LATDbits.LATD7 = LCD_data.bit7;
  1223  0009FA  AE38               	btfss	_LCD_data,7,c
  1224  0009FC  D002               	bra	u45
  1225  0009FE  8E8C               	bsf	3980,7,c	;volatile
  1226  000A00  D001               	bra	u47
  1227  000A02                     u45:
  1228  000A02  9E8C               	bcf	3980,7,c	;volatile
  1229  000A04                     u47:
  1230                           
  1231                           ;LCD_16x2.h: 284: LATDbits.LATD6 = LCD_data.bit6;
  1232  000A04  AC38               	btfss	_LCD_data,6,c
  1233  000A06  D002               	bra	u55
  1234  000A08  8C8C               	bsf	3980,6,c	;volatile
  1235  000A0A  D001               	bra	u57
  1236  000A0C                     u55:
  1237  000A0C  9C8C               	bcf	3980,6,c	;volatile
  1238  000A0E                     u57:
  1239                           
  1240                           ;LCD_16x2.h: 285: LATDbits.LATD5 = LCD_data.bit5;
  1241  000A0E  AA38               	btfss	_LCD_data,5,c
  1242  000A10  D002               	bra	u65
  1243  000A12  8A8C               	bsf	3980,5,c	;volatile
  1244  000A14  D001               	bra	u67
  1245  000A16                     u65:
  1246  000A16  9A8C               	bcf	3980,5,c	;volatile
  1247  000A18                     u67:
  1248                           
  1249                           ;LCD_16x2.h: 286: LATDbits.LATD4 = LCD_data.bit4;
  1250  000A18  A838               	btfss	_LCD_data,4,c
  1251  000A1A  D002               	bra	u75
  1252  000A1C  888C               	bsf	3980,4,c	;volatile
  1253  000A1E  D001               	bra	u77
  1254  000A20                     u75:
  1255  000A20  988C               	bcf	3980,4,c	;volatile
  1256  000A22                     u77:
  1257                           
  1258                           ;LCD_16x2.h: 288: LATDbits.LATD3 = 1; __nop(); LATDbits.LATD3 = 0;;
  1259  000A22  868C               	bsf	3980,3,c	;volatile
  1260  000A24  F000               	nop	
  1261  000A26  968C               	bcf	3980,3,c	;volatile
  1262                           
  1263                           ;LCD_16x2.h: 290: LATDbits.LATD7 = LCD_data.bit3;
  1264  000A28  A638               	btfss	_LCD_data,3,c
  1265  000A2A  D002               	bra	u85
  1266  000A2C  8E8C               	bsf	3980,7,c	;volatile
  1267  000A2E  D001               	bra	u87
  1268  000A30                     u85:
  1269  000A30  9E8C               	bcf	3980,7,c	;volatile
  1270  000A32                     u87:
  1271                           
  1272                           ;LCD_16x2.h: 291: LATDbits.LATD6 = LCD_data.bit2;
  1273  000A32  A438               	btfss	_LCD_data,2,c
  1274  000A34  D002               	bra	u95
  1275  000A36  8C8C               	bsf	3980,6,c	;volatile
  1276  000A38  D001               	bra	u97
  1277  000A3A                     u95:
  1278  000A3A  9C8C               	bcf	3980,6,c	;volatile
  1279  000A3C                     u97:
  1280                           
  1281                           ;LCD_16x2.h: 292: LATDbits.LATD5 = LCD_data.bit1;
  1282  000A3C  A238               	btfss	_LCD_data,1,c
  1283  000A3E  D002               	bra	u105
  1284  000A40  8A8C               	bsf	3980,5,c	;volatile
  1285  000A42  D001               	bra	u107
  1286  000A44                     u105:
  1287  000A44  9A8C               	bcf	3980,5,c	;volatile
  1288  000A46                     u107:
  1289                           
  1290                           ;LCD_16x2.h: 293: LATDbits.LATD4 = LCD_data.bit0;
  1291  000A46  A038               	btfss	_LCD_data,0,c
  1292  000A48  D002               	bra	u115
  1293  000A4A  888C               	bsf	3980,4,c	;volatile
  1294  000A4C  D001               	bra	u117
  1295  000A4E                     u115:
  1296  000A4E  988C               	bcf	3980,4,c	;volatile
  1297  000A50                     u117:
  1298                           
  1299                           ;LCD_16x2.h: 294: LATDbits.LATD3 = 1; __nop(); LATDbits.LATD3 = 0;;
  1300  000A50  868C               	bsf	3980,3,c	;volatile
  1301  000A52  F000               	nop	
  1302  000A54  968C               	bcf	3980,3,c	;volatile
  1303  000A56  0012               	return		;funcret
  1304  000A58                     __end_of_LCD_Write:
  1305                           	opt stack 0
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           postinc0	equ	0xFEE
  1311                           wreg	equ	0xFE8
  1312                           postdec1	equ	0xFE5
  1313                           fsr1l	equ	0xFE1
  1314                           indf2	equ	0xFDF
  1315                           fsr2h	equ	0xFDA
  1316                           fsr2l	equ	0xFD9
  1317                           status	equ	0xFD8
  1318                           
  1319 ;; *************** function _LCD_Busy *****************
  1320 ;; Defined at:
  1321 ;;		line 321 in file "LCD_16x2.h"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;		None
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;		None
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  1    wreg      unsigned char 
  1328 ;; Registers used:
  1329 ;;		wreg, status,2, status,0
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1335 ;;      Params:         0       0       0       0       0       0       0       0       0
  1336 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1338 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1339 ;;Total ram usage:        0 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; This function calls:
  1342 ;;		Nothing
  1343 ;; This function is called by:
  1344 ;;		_LCD_Init
  1345 ;;		_LCD_TextOut
  1346 ;;		_LCD_ConstTextOut
  1347 ;;		_main
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text9
  1352  000A58                     __ptext9:
  1353                           	opt stack 0
  1354  000A58                     _LCD_Busy:
  1355                           	opt stack 28
  1356                           
  1357                           ;LCD_16x2.h: 322: if (LCD_busy_cnt >= 100) {
  1358                           
  1359                           ;incstack = 0
  1360  000A58  503A               	movf	_LCD_busy_cnt+1,w,c
  1361  000A5A  E104               	bnz	u10
  1362  000A5C  0E64               	movlw	100
  1363  000A5E  5C39               	subwf	_LCD_busy_cnt,w,c
  1364  000A60  A0D8               	btfss	status,0,c
  1365  000A62  D006               	goto	l84
  1366  000A64                     u10:
  1367                           
  1368                           ;LCD_16x2.h: 323: LCD_busy_cnt = 1;
  1369  000A64  0E00               	movlw	0
  1370  000A66  6E3A               	movwf	_LCD_busy_cnt+1,c
  1371  000A68  0E01               	movlw	1
  1372  000A6A  6E39               	movwf	_LCD_busy_cnt,c
  1373                           
  1374                           ;LCD_16x2.h: 324: return 0;
  1375  000A6C  0E00               	movlw	0
  1376  000A6E  0012               	return	
  1377  000A70                     l84:
  1378                           
  1379                           ;LCD_16x2.h: 325: }
  1380                           ;LCD_16x2.h: 327: LATAbits.LATA0 = 1;
  1381  000A70  8089               	bsf	3977,0,c	;volatile
  1382                           
  1383                           ;LCD_16x2.h: 328: LATDbits.LATD2 = 0;
  1384  000A72  948C               	bcf	3980,2,c	;volatile
  1385                           
  1386                           ;LCD_16x2.h: 329: TRISD |= 0xF0;
  1387  000A74  0EF0               	movlw	240
  1388  000A76  1295               	iorwf	3989,f,c	;volatile
  1389                           
  1390                           ;LCD_16x2.h: 331: LATDbits.LATD3 = 1;;
  1391  000A78  868C               	bsf	3980,3,c	;volatile
  1392                           
  1393                           ;LCD_16x2.h: 332: __nop();
  1394  000A7A  F000               	nop	
  1395                           
  1396                           ;LCD_16x2.h: 333: LCD_data.bit7 = PORTDbits.RD7;
  1397  000A7C  AE83               	btfss	3971,7,c	;volatile
  1398  000A7E  D002               	bra	u25
  1399  000A80  8E38               	bsf	_LCD_data,7,c
  1400  000A82  D001               	bra	u27
  1401  000A84                     u25:
  1402  000A84  9E38               	bcf	_LCD_data,7,c
  1403  000A86                     u27:
  1404                           
  1405                           ;LCD_16x2.h: 334: LATDbits.LATD3 = 0;;
  1406  000A86  968C               	bcf	3980,3,c	;volatile
  1407                           
  1408                           ;LCD_16x2.h: 335: LATDbits.LATD3 = 1;;
  1409  000A88  868C               	bsf	3980,3,c	;volatile
  1410                           
  1411                           ;LCD_16x2.h: 336: __nop();
  1412  000A8A  F000               	nop	
  1413                           
  1414                           ;LCD_16x2.h: 337: LATDbits.LATD3 = 0;;
  1415  000A8C  968C               	bcf	3980,3,c	;volatile
  1416                           
  1417                           ;LCD_16x2.h: 339: TRISD &= 0x0F;
  1418  000A8E  0E0F               	movlw	15
  1419  000A90  1695               	andwf	3989,f,c	;volatile
  1420                           
  1421                           ;LCD_16x2.h: 340: LATAbits.LATA0 = 0;
  1422  000A92  9089               	bcf	3977,0,c	;volatile
  1423                           
  1424                           ;LCD_16x2.h: 342: if (LCD_data.bit7 == 1) {
  1425  000A94  AE38               	btfss	_LCD_data,7,c
  1426  000A96  D004               	goto	l86
  1427                           
  1428                           ;LCD_16x2.h: 343: LCD_busy_cnt++;
  1429  000A98  4A39               	infsnz	_LCD_busy_cnt,f,c
  1430  000A9A  2A3A               	incf	_LCD_busy_cnt+1,f,c
  1431                           
  1432                           ;LCD_16x2.h: 344: return 1;
  1433  000A9C  0E01               	movlw	1
  1434                           
  1435                           ;LCD_16x2.h: 345: } else {
  1436  000A9E  0012               	return	
  1437  000AA0                     l86:
  1438                           
  1439                           ;LCD_16x2.h: 346: LCD_busy_cnt = 1;
  1440  000AA0  0E00               	movlw	0
  1441  000AA2  6E3A               	movwf	_LCD_busy_cnt+1,c
  1442  000AA4  0E01               	movlw	1
  1443  000AA6  6E39               	movwf	_LCD_busy_cnt,c
  1444                           
  1445                           ;LCD_16x2.h: 347: return 0;
  1446  000AA8  0E00               	movlw	0
  1447  000AAA  0012               	return	
  1448  000AAC                     __end_of_LCD_Busy:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           postdec1	equ	0xFE5
  1457                           fsr1l	equ	0xFE1
  1458                           indf2	equ	0xFDF
  1459                           fsr2h	equ	0xFDA
  1460                           fsr2l	equ	0xFD9
  1461                           status	equ	0xFD8
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1l	equ	0xFE1
  1470                           indf2	equ	0xFDF
  1471                           fsr2h	equ	0xFDA
  1472                           fsr2l	equ	0xFD9
  1473                           status	equ	0xFD8
  1474                           
  1475                           	psect	rparam
  1476  0000                     tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postdec1	equ	0xFE5
  1483                           fsr1l	equ	0xFE1
  1484                           indf2	equ	0xFDF
  1485                           fsr2h	equ	0xFDA
  1486                           fsr2l	equ	0xFD9
  1487                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        7
    BSS         4
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     45      58
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printNumber@str	PTR unsigned char  size(2) Largest target is 33
		 -> printNumber@buf(COMRAM[33]), 

    LCD_ConstTextOut@text	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    LCD_TextOut@text	PTR unsigned char  size(2) Largest target is 33
		 -> btnText(COMRAM[7]), printNumber@buf(COMRAM[33]), 


Critical Paths under _main in COMRAM

    _main->_printNumber
    _printNumber->___lwdiv
    _LCD_TextOut->_LCD_Write
    _LCD_Init->_LCD_Write
    _LCD_Init->_LCD_Write_Nibble
    _LCD_ConstTextOut->_LCD_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1491
                           _LCD_Busy
                   _LCD_ConstTextOut
                           _LCD_Init
                        _LCD_TextOut
                          _LCD_Write
                        _printNumber
 ---------------------------------------------------------------------------------
 (1) _printNumber                                         38    36      2    1098
                                              7 COMRAM    38    36      2
                        _LCD_TextOut
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _LCD_TextOut                                          2     0      2     212
                                              1 COMRAM     2     0      2
                           _LCD_Busy
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0      30
                                              1 COMRAM     1     1      0
                           _LCD_Busy
                          _LCD_Write
                   _LCD_Write_Nibble
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Nibble                                     1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_ConstTextOut                                     2     0      2     136
                                              1 COMRAM     2     0      2
                           _LCD_Busy
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Busy                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Busy
   _LCD_ConstTextOut
     _LCD_Busy
     _LCD_Write
   _LCD_Init
     _LCD_Busy
     _LCD_Write
     _LCD_Write_Nibble
   _LCD_TextOut
     _LCD_Busy
     _LCD_Write
   _LCD_Write
   _printNumber
     _LCD_TextOut
       _LCD_Busy
       _LCD_Write
     ___lwdiv
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2D      3A       1       61.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3A      20        0.0%
DATA                 0      0      3A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 23 21:38:51 2018

                       l40 0862                         l52 08A2                         l46 087E  
                       l55 08B4                         l49 0890                         l66 0C06  
                       l75 0BD2                         l67 0BE8                         l84 0A70  
                       l76 0BB2                         l86 0AA0                         l96 0994  
                       u10 0A64                         u25 0A84                         u27 0A86  
                       u45 0A02                         u55 0A0C                         u47 0A04  
                       u65 0A16                         u57 0A0E                         u75 0A20  
                       u67 0A18                         u85 0A30                         u77 0A22  
                       u95 0A3A                         u87 0A32                         u97 0A3C  
              __CFG_BOR$ON 000000                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
                      l110 0922                        l104 08E6                        l113 0934  
                      l115 0946                        l107 0904                        l116 0956  
                      l530 0ACA                        l531 0AC2                        l540 0B14  
                      l541 0B0C                        l534 0AEA                        l535 0AF4  
                      l544 0B2C                        l545 0B36               __CFG_CPB$OFF 000000  
                      u105 0A44                        u115 0A4E                        u107 0A46  
                      u117 0A50                        u125 0B52                        u135 0B5C  
                      u127 0B54                        u240 086C                        u145 0B66  
                      u137 0B5E                        u155 0B70                        u147 0B68  
                      u157 0B72                        u440 0ACE               __CFG_CPD$OFF 000000  
                      u470 0B18                        u607 082A                        u560 094A  
                      u617 083A                        u627 0848                        u580 095C  
                      u637 0856                        u647 08C8               ?_LCD_TextOut 0002  
                      wreg 000FE8               __CFG_LVP$OFF 000000               printNumber@c 002B  
             printNumber@n 0008               __CFG_WDT$OFF 000000          ?_LCD_Write_Nibble 0001  
                     STR_1 0801         ??_LCD_Write_Nibble 0001                       _main 08D0  
                     fsr2h 000FDA                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       start 0000         __size_of_LCD_Write 0066  
            __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000               ___param_bank 000000  
         __end_of_LCD_Busy 0AAC           __end_of_LCD_Init 08D0              __CFG_PLLDIV$1 000000  
           __CFG_CCP2MX$ON 000000                      ?_main 0001            __end_of___lwdiv 0AFE  
          __end_of___lwmod 0B40                      _PORTC 000F82              __CFG_USBDIV$1 000000  
                    _TRISC 000F94                      _TRISD 000F95              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
           __CFG_EBTRB$OFF 000000                      tablat 000FF5                      status 000FD8  
 __end_of_LCD_ConstTextOut 0BE6             __CFG_ICPRT$OFF 000000            __initialization 0B7A  
             __end_of_main 0980                     ??_main 002E              __activetblptr 000001  
        __end_of_LCD_Write 0A58             printNumber@buf 000A             printNumber@str 002C  
                   _ADCON1 000FC1             __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000  
                ??___lwdiv 0005                  ??___lwmod 0005               __pdataCOMRAM 002E  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8       __size_of_LCD_TextOut 0030               ?_printNumber 0008  
               __accesstop 0060    __end_of__initialization 0BA2                  ?_LCD_Busy 0001  
                ?_LCD_Init 0001            __CFG_PBADEN$OFF 000000              ___rparam_used 000001  
           __pcstackCOMRAM 0001                 ??_LCD_Busy 0001                 ??_LCD_Init 0002  
               __pnvCOMRAM 0039  __size_of_LCD_Write_Nibble 003A            __CFG_VREGEN$OFF 000000  
        ?_LCD_ConstTextOut 0002                    __Hparam 0000                    __Lparam 0000  
       ??_LCD_ConstTextOut 0004                    ___lwdiv 0AAC                    ___lwmod 0AFE  
             __psmallconst 0800            LCD_TextOut@text 0002                    __pcinit 0B7A  
                  __ramtop 0800                    __ptext0 08D0                    __ptext1 0980  
                  __ptext2 0AFE                    __ptext3 0AAC                    __ptext4 0BE6  
                  __ptext5 080C                    __ptext6 0B40                    __ptext7 0BB0  
                  __ptext8 09F2                    __ptext9 0A58                    _btnText 002E  
                _LCD_Write 09F2       end_of_initialization 0BA2       __size_of_printNumber 0072  
                  postdec1 000FE5                    postinc0 000FEE                  _PORTBbits 000F81  
                _PORTDbits 000F83                  _TRISAbits 000F92                  _TRISBbits 000F93  
                _TRISDbits 000F95                 ?_LCD_Write 0001          __size_of_LCD_Busy 0054  
        __size_of_LCD_Init 00C4           _LCD_Write_Nibble 0B40              __pidataCOMRAM 0C16  
            ??_LCD_TextOut 0004        start_initialization 0B7A               _LCD_busy_cnt 0039  
         __CFG_LPT1OSC$OFF 000000                __pbssCOMRAM 0035                ??_LCD_Write 0001  
      __end_of_LCD_TextOut 0C16      LCD_Write_Nibble@value 0001           ___lwdiv@dividend 0001  
                _cntButton 0035                   ?___lwdiv 0001                   ?___lwmod 0001  
__size_of_LCD_ConstTextOut 0036                __smallconst 0800           ___lwdiv@quotient 0005  
                 _LCD_Busy 0A58                   _LCD_Init 080C                   _LATAbits 000F89  
                 _LATDbits 000F8C                   _LCD_data 0038           __CFG_WDTPS$32768 000000  
              _displayTODO 0037                _LCD_TextOut 0BE6   __end_of_LCD_Write_Nibble 0B7A  
            ??_printNumber 000A                  copy_data0 0B8E                   __Hrparam 0000  
                 __Lrparam 0000               __Lsmallconst 0800             LCD_Write@value 0001  
         __size_of___lwdiv 0052           __size_of___lwmod 0042      __CFG_FOSC$INTOSCIO_EC 000000  
          ___lwdiv@divisor 0003            ___lwdiv@counter 0007              __size_of_main 00B0  
      __end_of_printNumber 09F2      __CFG_CPUDIV$OSC1_PLL2 000000           _LCD_ConstTextOut 0BB0  
         ___lwmod@dividend 0001            ___lwmod@divisor 0003       LCD_ConstTextOut@text 0002  
          ___lwmod@counter 0005                _printNumber 0980  
